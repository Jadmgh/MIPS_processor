// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "03/12/2025 11:34:37"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    Lab2
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module Lab2_vlg_sample_tst(
	GClock,
	GReset,
	RAM_Clock,
	ValueSelect,
	sampler_tx
);
input  GClock;
input  GReset;
input  RAM_Clock;
input [2:0] ValueSelect;
output sampler_tx;

reg sample;
time current_time;
always @(GClock or GReset or RAM_Clock or ValueSelect)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module Lab2_vlg_check_tst (
	input_PC_BTA,
	MemToR,
	MuxOut,
	next_pc4,
	operation,
	PCValue,
	q,
	RAM_output,
	rd1,
	rd2,
	rr1,
	rr2,
	sampler_rx
);
input [31:0] input_PC_BTA;
input  MemToR;
input [7:0] MuxOut;
input [7:0] next_pc4;
input [2:0] operation;
input [7:0] PCValue;
input [31:0] q;
input [7:0] RAM_output;
input [7:0] rd1;
input [7:0] rd2;
input [4:0] rr1;
input [4:0] rr2;
input sampler_rx;

reg [31:0] input_PC_BTA_expected;
reg  MemToR_expected;
reg [7:0] MuxOut_expected;
reg [7:0] next_pc4_expected;
reg [2:0] operation_expected;
reg [7:0] PCValue_expected;
reg [31:0] q_expected;
reg [7:0] RAM_output_expected;
reg [7:0] rd1_expected;
reg [7:0] rd2_expected;
reg [4:0] rr1_expected;
reg [4:0] rr2_expected;

reg [31:0] input_PC_BTA_prev;
reg  MemToR_prev;
reg [7:0] MuxOut_prev;
reg [7:0] next_pc4_prev;
reg [2:0] operation_prev;
reg [7:0] PCValue_prev;
reg [31:0] q_prev;
reg [7:0] RAM_output_prev;
reg [7:0] rd1_prev;
reg [7:0] rd2_prev;
reg [4:0] rr1_prev;
reg [4:0] rr2_prev;

reg [7:0] MuxOut_expected_prev;
reg [2:0] operation_expected_prev;
reg [7:0] PCValue_expected_prev;
reg [31:0] q_expected_prev;

reg [7:0] last_MuxOut_exp;
reg [2:0] last_operation_exp;
reg [7:0] last_PCValue_exp;
reg [31:0] last_q_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:12] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 12'b1;
end

// update real /o prevs

always @(trigger)
begin
	input_PC_BTA_prev = input_PC_BTA;
	MemToR_prev = MemToR;
	MuxOut_prev = MuxOut;
	next_pc4_prev = next_pc4;
	operation_prev = operation;
	PCValue_prev = PCValue;
	q_prev = q;
	RAM_output_prev = RAM_output;
	rd1_prev = rd1;
	rd2_prev = rd2;
	rr1_prev = rr1;
	rr2_prev = rr2;
end

// update expected /o prevs

always @(trigger)
begin
	MuxOut_expected_prev = MuxOut_expected;
	operation_expected_prev = operation_expected;
	PCValue_expected_prev = PCValue_expected;
	q_expected_prev = q_expected;
end


// expected MuxOut[ 7 ]
initial
begin
	MuxOut_expected[7] = 1'bX;
end 
// expected MuxOut[ 6 ]
initial
begin
	MuxOut_expected[6] = 1'bX;
end 
// expected MuxOut[ 5 ]
initial
begin
	MuxOut_expected[5] = 1'bX;
end 
// expected MuxOut[ 4 ]
initial
begin
	MuxOut_expected[4] = 1'bX;
end 
// expected MuxOut[ 3 ]
initial
begin
	MuxOut_expected[3] = 1'bX;
end 
// expected MuxOut[ 2 ]
initial
begin
	MuxOut_expected[2] = 1'bX;
end 
// expected MuxOut[ 1 ]
initial
begin
	MuxOut_expected[1] = 1'bX;
end 
// expected MuxOut[ 0 ]
initial
begin
	MuxOut_expected[0] = 1'bX;
end 
// expected operation[ 2 ]
initial
begin
	operation_expected[2] = 1'bX;
end 
// expected operation[ 1 ]
initial
begin
	operation_expected[1] = 1'bX;
end 
// expected operation[ 0 ]
initial
begin
	operation_expected[0] = 1'bX;
end 
// expected PCValue[ 7 ]
initial
begin
	PCValue_expected[7] = 1'bX;
end 
// expected PCValue[ 6 ]
initial
begin
	PCValue_expected[6] = 1'bX;
end 
// expected PCValue[ 5 ]
initial
begin
	PCValue_expected[5] = 1'bX;
end 
// expected PCValue[ 4 ]
initial
begin
	PCValue_expected[4] = 1'bX;
end 
// expected PCValue[ 3 ]
initial
begin
	PCValue_expected[3] = 1'bX;
end 
// expected PCValue[ 2 ]
initial
begin
	PCValue_expected[2] = 1'bX;
end 
// expected PCValue[ 1 ]
initial
begin
	PCValue_expected[1] = 1'bX;
end 
// expected PCValue[ 0 ]
initial
begin
	PCValue_expected[0] = 1'bX;
end 
// expected q[ 31 ]
initial
begin
	q_expected[31] = 1'bX;
end 
// expected q[ 30 ]
initial
begin
	q_expected[30] = 1'bX;
end 
// expected q[ 29 ]
initial
begin
	q_expected[29] = 1'bX;
end 
// expected q[ 28 ]
initial
begin
	q_expected[28] = 1'bX;
end 
// expected q[ 27 ]
initial
begin
	q_expected[27] = 1'bX;
end 
// expected q[ 26 ]
initial
begin
	q_expected[26] = 1'bX;
end 
// expected q[ 25 ]
initial
begin
	q_expected[25] = 1'bX;
end 
// expected q[ 24 ]
initial
begin
	q_expected[24] = 1'bX;
end 
// expected q[ 23 ]
initial
begin
	q_expected[23] = 1'bX;
end 
// expected q[ 22 ]
initial
begin
	q_expected[22] = 1'bX;
end 
// expected q[ 21 ]
initial
begin
	q_expected[21] = 1'bX;
end 
// expected q[ 20 ]
initial
begin
	q_expected[20] = 1'bX;
end 
// expected q[ 19 ]
initial
begin
	q_expected[19] = 1'bX;
end 
// expected q[ 18 ]
initial
begin
	q_expected[18] = 1'bX;
end 
// expected q[ 17 ]
initial
begin
	q_expected[17] = 1'bX;
end 
// expected q[ 16 ]
initial
begin
	q_expected[16] = 1'bX;
end 
// expected q[ 15 ]
initial
begin
	q_expected[15] = 1'bX;
end 
// expected q[ 14 ]
initial
begin
	q_expected[14] = 1'bX;
end 
// expected q[ 13 ]
initial
begin
	q_expected[13] = 1'bX;
end 
// expected q[ 12 ]
initial
begin
	q_expected[12] = 1'bX;
end 
// expected q[ 11 ]
initial
begin
	q_expected[11] = 1'bX;
end 
// expected q[ 10 ]
initial
begin
	q_expected[10] = 1'bX;
end 
// expected q[ 9 ]
initial
begin
	q_expected[9] = 1'bX;
end 
// expected q[ 8 ]
initial
begin
	q_expected[8] = 1'bX;
end 
// expected q[ 7 ]
initial
begin
	q_expected[7] = 1'bX;
end 
// expected q[ 6 ]
initial
begin
	q_expected[6] = 1'bX;
end 
// expected q[ 5 ]
initial
begin
	q_expected[5] = 1'bX;
end 
// expected q[ 4 ]
initial
begin
	q_expected[4] = 1'bX;
end 
// expected q[ 3 ]
initial
begin
	q_expected[3] = 1'bX;
end 
// expected q[ 2 ]
initial
begin
	q_expected[2] = 1'bX;
end 
// expected q[ 1 ]
initial
begin
	q_expected[1] = 1'bX;
end 
// expected q[ 0 ]
initial
begin
	q_expected[0] = 1'bX;
end 
// generate trigger
always @(input_PC_BTA_expected or input_PC_BTA or MemToR_expected or MemToR or MuxOut_expected or MuxOut or next_pc4_expected or next_pc4 or operation_expected or operation or PCValue_expected or PCValue or q_expected or q or RAM_output_expected or RAM_output or rd1_expected or rd1 or rd2_expected or rd2 or rr1_expected or rr1 or rr2_expected or rr2)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected input_PC_BTA = %b | expected MemToR = %b | expected MuxOut = %b | expected next_pc4 = %b | expected operation = %b | expected PCValue = %b | expected q = %b | expected RAM_output = %b | expected rd1 = %b | expected rd2 = %b | expected rr1 = %b | expected rr2 = %b | ",input_PC_BTA_expected_prev,MemToR_expected_prev,MuxOut_expected_prev,next_pc4_expected_prev,operation_expected_prev,PCValue_expected_prev,q_expected_prev,RAM_output_expected_prev,rd1_expected_prev,rd2_expected_prev,rr1_expected_prev,rr2_expected_prev);
	$display("| real input_PC_BTA = %b | real MemToR = %b | real MuxOut = %b | real next_pc4 = %b | real operation = %b | real PCValue = %b | real q = %b | real RAM_output = %b | real rd1 = %b | real rd2 = %b | real rr1 = %b | real rr2 = %b | ",input_PC_BTA_prev,MemToR_prev,MuxOut_prev,next_pc4_prev,operation_prev,PCValue_prev,q_prev,RAM_output_prev,rd1_prev,rd2_prev,rr1_prev,rr2_prev);
`endif
	if (
		( MuxOut_expected_prev[0] !== 1'bx ) && ( MuxOut_prev[0] !== MuxOut_expected_prev[0] )
		&& ((MuxOut_expected_prev[0] !== last_MuxOut_exp[0]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MuxOut[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MuxOut_expected_prev);
		$display ("     Real value = %b", MuxOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_MuxOut_exp[0] = MuxOut_expected_prev[0];
	end
	if (
		( MuxOut_expected_prev[1] !== 1'bx ) && ( MuxOut_prev[1] !== MuxOut_expected_prev[1] )
		&& ((MuxOut_expected_prev[1] !== last_MuxOut_exp[1]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MuxOut[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MuxOut_expected_prev);
		$display ("     Real value = %b", MuxOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_MuxOut_exp[1] = MuxOut_expected_prev[1];
	end
	if (
		( MuxOut_expected_prev[2] !== 1'bx ) && ( MuxOut_prev[2] !== MuxOut_expected_prev[2] )
		&& ((MuxOut_expected_prev[2] !== last_MuxOut_exp[2]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MuxOut[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MuxOut_expected_prev);
		$display ("     Real value = %b", MuxOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_MuxOut_exp[2] = MuxOut_expected_prev[2];
	end
	if (
		( MuxOut_expected_prev[3] !== 1'bx ) && ( MuxOut_prev[3] !== MuxOut_expected_prev[3] )
		&& ((MuxOut_expected_prev[3] !== last_MuxOut_exp[3]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MuxOut[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MuxOut_expected_prev);
		$display ("     Real value = %b", MuxOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_MuxOut_exp[3] = MuxOut_expected_prev[3];
	end
	if (
		( MuxOut_expected_prev[4] !== 1'bx ) && ( MuxOut_prev[4] !== MuxOut_expected_prev[4] )
		&& ((MuxOut_expected_prev[4] !== last_MuxOut_exp[4]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MuxOut[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MuxOut_expected_prev);
		$display ("     Real value = %b", MuxOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_MuxOut_exp[4] = MuxOut_expected_prev[4];
	end
	if (
		( MuxOut_expected_prev[5] !== 1'bx ) && ( MuxOut_prev[5] !== MuxOut_expected_prev[5] )
		&& ((MuxOut_expected_prev[5] !== last_MuxOut_exp[5]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MuxOut[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MuxOut_expected_prev);
		$display ("     Real value = %b", MuxOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_MuxOut_exp[5] = MuxOut_expected_prev[5];
	end
	if (
		( MuxOut_expected_prev[6] !== 1'bx ) && ( MuxOut_prev[6] !== MuxOut_expected_prev[6] )
		&& ((MuxOut_expected_prev[6] !== last_MuxOut_exp[6]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MuxOut[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MuxOut_expected_prev);
		$display ("     Real value = %b", MuxOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_MuxOut_exp[6] = MuxOut_expected_prev[6];
	end
	if (
		( MuxOut_expected_prev[7] !== 1'bx ) && ( MuxOut_prev[7] !== MuxOut_expected_prev[7] )
		&& ((MuxOut_expected_prev[7] !== last_MuxOut_exp[7]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MuxOut[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MuxOut_expected_prev);
		$display ("     Real value = %b", MuxOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_MuxOut_exp[7] = MuxOut_expected_prev[7];
	end
	if (
		( operation_expected_prev[0] !== 1'bx ) && ( operation_prev[0] !== operation_expected_prev[0] )
		&& ((operation_expected_prev[0] !== last_operation_exp[0]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port operation[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", operation_expected_prev);
		$display ("     Real value = %b", operation_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_operation_exp[0] = operation_expected_prev[0];
	end
	if (
		( operation_expected_prev[1] !== 1'bx ) && ( operation_prev[1] !== operation_expected_prev[1] )
		&& ((operation_expected_prev[1] !== last_operation_exp[1]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port operation[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", operation_expected_prev);
		$display ("     Real value = %b", operation_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_operation_exp[1] = operation_expected_prev[1];
	end
	if (
		( operation_expected_prev[2] !== 1'bx ) && ( operation_prev[2] !== operation_expected_prev[2] )
		&& ((operation_expected_prev[2] !== last_operation_exp[2]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port operation[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", operation_expected_prev);
		$display ("     Real value = %b", operation_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_operation_exp[2] = operation_expected_prev[2];
	end
	if (
		( PCValue_expected_prev[0] !== 1'bx ) && ( PCValue_prev[0] !== PCValue_expected_prev[0] )
		&& ((PCValue_expected_prev[0] !== last_PCValue_exp[0]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PCValue[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PCValue_expected_prev);
		$display ("     Real value = %b", PCValue_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_PCValue_exp[0] = PCValue_expected_prev[0];
	end
	if (
		( PCValue_expected_prev[1] !== 1'bx ) && ( PCValue_prev[1] !== PCValue_expected_prev[1] )
		&& ((PCValue_expected_prev[1] !== last_PCValue_exp[1]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PCValue[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PCValue_expected_prev);
		$display ("     Real value = %b", PCValue_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_PCValue_exp[1] = PCValue_expected_prev[1];
	end
	if (
		( PCValue_expected_prev[2] !== 1'bx ) && ( PCValue_prev[2] !== PCValue_expected_prev[2] )
		&& ((PCValue_expected_prev[2] !== last_PCValue_exp[2]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PCValue[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PCValue_expected_prev);
		$display ("     Real value = %b", PCValue_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_PCValue_exp[2] = PCValue_expected_prev[2];
	end
	if (
		( PCValue_expected_prev[3] !== 1'bx ) && ( PCValue_prev[3] !== PCValue_expected_prev[3] )
		&& ((PCValue_expected_prev[3] !== last_PCValue_exp[3]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PCValue[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PCValue_expected_prev);
		$display ("     Real value = %b", PCValue_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_PCValue_exp[3] = PCValue_expected_prev[3];
	end
	if (
		( PCValue_expected_prev[4] !== 1'bx ) && ( PCValue_prev[4] !== PCValue_expected_prev[4] )
		&& ((PCValue_expected_prev[4] !== last_PCValue_exp[4]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PCValue[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PCValue_expected_prev);
		$display ("     Real value = %b", PCValue_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_PCValue_exp[4] = PCValue_expected_prev[4];
	end
	if (
		( PCValue_expected_prev[5] !== 1'bx ) && ( PCValue_prev[5] !== PCValue_expected_prev[5] )
		&& ((PCValue_expected_prev[5] !== last_PCValue_exp[5]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PCValue[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PCValue_expected_prev);
		$display ("     Real value = %b", PCValue_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_PCValue_exp[5] = PCValue_expected_prev[5];
	end
	if (
		( PCValue_expected_prev[6] !== 1'bx ) && ( PCValue_prev[6] !== PCValue_expected_prev[6] )
		&& ((PCValue_expected_prev[6] !== last_PCValue_exp[6]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PCValue[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PCValue_expected_prev);
		$display ("     Real value = %b", PCValue_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_PCValue_exp[6] = PCValue_expected_prev[6];
	end
	if (
		( PCValue_expected_prev[7] !== 1'bx ) && ( PCValue_prev[7] !== PCValue_expected_prev[7] )
		&& ((PCValue_expected_prev[7] !== last_PCValue_exp[7]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PCValue[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PCValue_expected_prev);
		$display ("     Real value = %b", PCValue_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_PCValue_exp[7] = PCValue_expected_prev[7];
	end
	if (
		( q_expected_prev[0] !== 1'bx ) && ( q_prev[0] !== q_expected_prev[0] )
		&& ((q_expected_prev[0] !== last_q_exp[0]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port q[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", q_expected_prev);
		$display ("     Real value = %b", q_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_q_exp[0] = q_expected_prev[0];
	end
	if (
		( q_expected_prev[1] !== 1'bx ) && ( q_prev[1] !== q_expected_prev[1] )
		&& ((q_expected_prev[1] !== last_q_exp[1]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port q[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", q_expected_prev);
		$display ("     Real value = %b", q_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_q_exp[1] = q_expected_prev[1];
	end
	if (
		( q_expected_prev[2] !== 1'bx ) && ( q_prev[2] !== q_expected_prev[2] )
		&& ((q_expected_prev[2] !== last_q_exp[2]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port q[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", q_expected_prev);
		$display ("     Real value = %b", q_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_q_exp[2] = q_expected_prev[2];
	end
	if (
		( q_expected_prev[3] !== 1'bx ) && ( q_prev[3] !== q_expected_prev[3] )
		&& ((q_expected_prev[3] !== last_q_exp[3]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port q[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", q_expected_prev);
		$display ("     Real value = %b", q_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_q_exp[3] = q_expected_prev[3];
	end
	if (
		( q_expected_prev[4] !== 1'bx ) && ( q_prev[4] !== q_expected_prev[4] )
		&& ((q_expected_prev[4] !== last_q_exp[4]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port q[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", q_expected_prev);
		$display ("     Real value = %b", q_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_q_exp[4] = q_expected_prev[4];
	end
	if (
		( q_expected_prev[5] !== 1'bx ) && ( q_prev[5] !== q_expected_prev[5] )
		&& ((q_expected_prev[5] !== last_q_exp[5]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port q[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", q_expected_prev);
		$display ("     Real value = %b", q_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_q_exp[5] = q_expected_prev[5];
	end
	if (
		( q_expected_prev[6] !== 1'bx ) && ( q_prev[6] !== q_expected_prev[6] )
		&& ((q_expected_prev[6] !== last_q_exp[6]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port q[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", q_expected_prev);
		$display ("     Real value = %b", q_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_q_exp[6] = q_expected_prev[6];
	end
	if (
		( q_expected_prev[7] !== 1'bx ) && ( q_prev[7] !== q_expected_prev[7] )
		&& ((q_expected_prev[7] !== last_q_exp[7]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port q[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", q_expected_prev);
		$display ("     Real value = %b", q_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_q_exp[7] = q_expected_prev[7];
	end
	if (
		( q_expected_prev[8] !== 1'bx ) && ( q_prev[8] !== q_expected_prev[8] )
		&& ((q_expected_prev[8] !== last_q_exp[8]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port q[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", q_expected_prev);
		$display ("     Real value = %b", q_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_q_exp[8] = q_expected_prev[8];
	end
	if (
		( q_expected_prev[9] !== 1'bx ) && ( q_prev[9] !== q_expected_prev[9] )
		&& ((q_expected_prev[9] !== last_q_exp[9]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port q[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", q_expected_prev);
		$display ("     Real value = %b", q_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_q_exp[9] = q_expected_prev[9];
	end
	if (
		( q_expected_prev[10] !== 1'bx ) && ( q_prev[10] !== q_expected_prev[10] )
		&& ((q_expected_prev[10] !== last_q_exp[10]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port q[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", q_expected_prev);
		$display ("     Real value = %b", q_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_q_exp[10] = q_expected_prev[10];
	end
	if (
		( q_expected_prev[11] !== 1'bx ) && ( q_prev[11] !== q_expected_prev[11] )
		&& ((q_expected_prev[11] !== last_q_exp[11]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port q[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", q_expected_prev);
		$display ("     Real value = %b", q_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_q_exp[11] = q_expected_prev[11];
	end
	if (
		( q_expected_prev[12] !== 1'bx ) && ( q_prev[12] !== q_expected_prev[12] )
		&& ((q_expected_prev[12] !== last_q_exp[12]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port q[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", q_expected_prev);
		$display ("     Real value = %b", q_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_q_exp[12] = q_expected_prev[12];
	end
	if (
		( q_expected_prev[13] !== 1'bx ) && ( q_prev[13] !== q_expected_prev[13] )
		&& ((q_expected_prev[13] !== last_q_exp[13]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port q[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", q_expected_prev);
		$display ("     Real value = %b", q_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_q_exp[13] = q_expected_prev[13];
	end
	if (
		( q_expected_prev[14] !== 1'bx ) && ( q_prev[14] !== q_expected_prev[14] )
		&& ((q_expected_prev[14] !== last_q_exp[14]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port q[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", q_expected_prev);
		$display ("     Real value = %b", q_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_q_exp[14] = q_expected_prev[14];
	end
	if (
		( q_expected_prev[15] !== 1'bx ) && ( q_prev[15] !== q_expected_prev[15] )
		&& ((q_expected_prev[15] !== last_q_exp[15]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port q[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", q_expected_prev);
		$display ("     Real value = %b", q_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_q_exp[15] = q_expected_prev[15];
	end
	if (
		( q_expected_prev[16] !== 1'bx ) && ( q_prev[16] !== q_expected_prev[16] )
		&& ((q_expected_prev[16] !== last_q_exp[16]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port q[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", q_expected_prev);
		$display ("     Real value = %b", q_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_q_exp[16] = q_expected_prev[16];
	end
	if (
		( q_expected_prev[17] !== 1'bx ) && ( q_prev[17] !== q_expected_prev[17] )
		&& ((q_expected_prev[17] !== last_q_exp[17]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port q[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", q_expected_prev);
		$display ("     Real value = %b", q_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_q_exp[17] = q_expected_prev[17];
	end
	if (
		( q_expected_prev[18] !== 1'bx ) && ( q_prev[18] !== q_expected_prev[18] )
		&& ((q_expected_prev[18] !== last_q_exp[18]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port q[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", q_expected_prev);
		$display ("     Real value = %b", q_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_q_exp[18] = q_expected_prev[18];
	end
	if (
		( q_expected_prev[19] !== 1'bx ) && ( q_prev[19] !== q_expected_prev[19] )
		&& ((q_expected_prev[19] !== last_q_exp[19]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port q[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", q_expected_prev);
		$display ("     Real value = %b", q_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_q_exp[19] = q_expected_prev[19];
	end
	if (
		( q_expected_prev[20] !== 1'bx ) && ( q_prev[20] !== q_expected_prev[20] )
		&& ((q_expected_prev[20] !== last_q_exp[20]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port q[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", q_expected_prev);
		$display ("     Real value = %b", q_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_q_exp[20] = q_expected_prev[20];
	end
	if (
		( q_expected_prev[21] !== 1'bx ) && ( q_prev[21] !== q_expected_prev[21] )
		&& ((q_expected_prev[21] !== last_q_exp[21]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port q[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", q_expected_prev);
		$display ("     Real value = %b", q_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_q_exp[21] = q_expected_prev[21];
	end
	if (
		( q_expected_prev[22] !== 1'bx ) && ( q_prev[22] !== q_expected_prev[22] )
		&& ((q_expected_prev[22] !== last_q_exp[22]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port q[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", q_expected_prev);
		$display ("     Real value = %b", q_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_q_exp[22] = q_expected_prev[22];
	end
	if (
		( q_expected_prev[23] !== 1'bx ) && ( q_prev[23] !== q_expected_prev[23] )
		&& ((q_expected_prev[23] !== last_q_exp[23]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port q[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", q_expected_prev);
		$display ("     Real value = %b", q_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_q_exp[23] = q_expected_prev[23];
	end
	if (
		( q_expected_prev[24] !== 1'bx ) && ( q_prev[24] !== q_expected_prev[24] )
		&& ((q_expected_prev[24] !== last_q_exp[24]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port q[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", q_expected_prev);
		$display ("     Real value = %b", q_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_q_exp[24] = q_expected_prev[24];
	end
	if (
		( q_expected_prev[25] !== 1'bx ) && ( q_prev[25] !== q_expected_prev[25] )
		&& ((q_expected_prev[25] !== last_q_exp[25]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port q[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", q_expected_prev);
		$display ("     Real value = %b", q_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_q_exp[25] = q_expected_prev[25];
	end
	if (
		( q_expected_prev[26] !== 1'bx ) && ( q_prev[26] !== q_expected_prev[26] )
		&& ((q_expected_prev[26] !== last_q_exp[26]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port q[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", q_expected_prev);
		$display ("     Real value = %b", q_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_q_exp[26] = q_expected_prev[26];
	end
	if (
		( q_expected_prev[27] !== 1'bx ) && ( q_prev[27] !== q_expected_prev[27] )
		&& ((q_expected_prev[27] !== last_q_exp[27]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port q[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", q_expected_prev);
		$display ("     Real value = %b", q_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_q_exp[27] = q_expected_prev[27];
	end
	if (
		( q_expected_prev[28] !== 1'bx ) && ( q_prev[28] !== q_expected_prev[28] )
		&& ((q_expected_prev[28] !== last_q_exp[28]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port q[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", q_expected_prev);
		$display ("     Real value = %b", q_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_q_exp[28] = q_expected_prev[28];
	end
	if (
		( q_expected_prev[29] !== 1'bx ) && ( q_prev[29] !== q_expected_prev[29] )
		&& ((q_expected_prev[29] !== last_q_exp[29]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port q[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", q_expected_prev);
		$display ("     Real value = %b", q_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_q_exp[29] = q_expected_prev[29];
	end
	if (
		( q_expected_prev[30] !== 1'bx ) && ( q_prev[30] !== q_expected_prev[30] )
		&& ((q_expected_prev[30] !== last_q_exp[30]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port q[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", q_expected_prev);
		$display ("     Real value = %b", q_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_q_exp[30] = q_expected_prev[30];
	end
	if (
		( q_expected_prev[31] !== 1'bx ) && ( q_prev[31] !== q_expected_prev[31] )
		&& ((q_expected_prev[31] !== last_q_exp[31]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port q[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", q_expected_prev);
		$display ("     Real value = %b", q_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_q_exp[31] = q_expected_prev[31];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#500000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module Lab2_vlg_vec_tst();
// constants                                           
// general purpose registers
reg GClock;
reg GReset;
reg RAM_Clock;
reg [2:0] ValueSelect;
// wires                                               
wire [31:0] input_PC_BTA;
wire MemToR;
wire [7:0] MuxOut;
wire [7:0] next_pc4;
wire [2:0] operation;
wire [7:0] PCValue;
wire [31:0] q;
wire [7:0] RAM_output;
wire [7:0] rd1;
wire [7:0] rd2;
wire [4:0] rr1;
wire [4:0] rr2;

wire sampler;                             

// assign statements (if any)                          
Lab2 i1 (
// port map - connection between master ports and signals/registers   
	.GClock(GClock),
	.GReset(GReset),
	.input_PC_BTA(input_PC_BTA),
	.MemToR(MemToR),
	.MuxOut(MuxOut),
	.next_pc4(next_pc4),
	.operation(operation),
	.PCValue(PCValue),
	.q(q),
	.RAM_Clock(RAM_Clock),
	.RAM_output(RAM_output),
	.rd1(rd1),
	.rd2(rd2),
	.rr1(rr1),
	.rr2(rr2),
	.ValueSelect(ValueSelect)
);

// GClock
always
begin
	GClock = 1'b0;
	GClock = #10000 1'b1;
	#10000;
end 

// GReset
initial
begin
	GReset = 1'b1;
	GReset = #10000 1'b0;
end 

// RAM_Clock
initial
begin
	RAM_Clock = 1'b0;
	RAM_Clock = #15000 1'b1;
	# 5000;
	repeat(48)
	begin
		RAM_Clock = 1'b0;
		RAM_Clock = #5000 1'b1;
		# 5000;
	end
end 
// ValueSelect[ 2 ]
initial
begin
	ValueSelect[2] = 1'b0;
end 
// ValueSelect[ 1 ]
initial
begin
	ValueSelect[1] = 1'b1;
end 
// ValueSelect[ 0 ]
initial
begin
	ValueSelect[0] = 1'b0;
end 

Lab2_vlg_sample_tst tb_sample (
	.GClock(GClock),
	.GReset(GReset),
	.RAM_Clock(RAM_Clock),
	.ValueSelect(ValueSelect),
	.sampler_tx(sampler)
);

Lab2_vlg_check_tst tb_out(
	.input_PC_BTA(input_PC_BTA),
	.MemToR(MemToR),
	.MuxOut(MuxOut),
	.next_pc4(next_pc4),
	.operation(operation),
	.PCValue(PCValue),
	.q(q),
	.RAM_output(RAM_output),
	.rd1(rd1),
	.rd2(rd2),
	.rr1(rr1),
	.rr2(rr2),
	.sampler_rx(sampler)
);
endmodule

