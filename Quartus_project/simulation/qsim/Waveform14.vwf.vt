// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "03/12/2025 10:24:51"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    testing_alu
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module testing_alu_vlg_sample_tst(
	A,
	ALU_ctrl,
	B,
	sampler_tx
);
input [31:0] A;
input [2:0] ALU_ctrl;
input [31:0] B;
output sampler_tx;

reg sample;
time current_time;
always @(A or ALU_ctrl or B)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module testing_alu_vlg_check_tst (
	result,
	result8bot,
	zero,
	sampler_rx
);
input [31:0] result;
input [7:0] result8bot;
input  zero;
input sampler_rx;

reg [31:0] result_expected;
reg [7:0] result8bot_expected;
reg  zero_expected;

reg [31:0] result_prev;
reg [7:0] result8bot_prev;
reg  zero_prev;

reg [31:0] result_expected_prev;
reg [7:0] result8bot_expected_prev;
reg  zero_expected_prev;

reg [31:0] last_result_exp;
reg [7:0] last_result8bot_exp;
reg  last_zero_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:3] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 3'b1;
end

// update real /o prevs

always @(trigger)
begin
	result_prev = result;
	result8bot_prev = result8bot;
	zero_prev = zero;
end

// update expected /o prevs

always @(trigger)
begin
	result_expected_prev = result_expected;
	result8bot_expected_prev = result8bot_expected;
	zero_expected_prev = zero_expected;
end


// expected result[ 31 ]
initial
begin
	result_expected[31] = 1'bX;
end 
// expected result[ 30 ]
initial
begin
	result_expected[30] = 1'bX;
end 
// expected result[ 29 ]
initial
begin
	result_expected[29] = 1'bX;
end 
// expected result[ 28 ]
initial
begin
	result_expected[28] = 1'bX;
end 
// expected result[ 27 ]
initial
begin
	result_expected[27] = 1'bX;
end 
// expected result[ 26 ]
initial
begin
	result_expected[26] = 1'bX;
end 
// expected result[ 25 ]
initial
begin
	result_expected[25] = 1'bX;
end 
// expected result[ 24 ]
initial
begin
	result_expected[24] = 1'bX;
end 
// expected result[ 23 ]
initial
begin
	result_expected[23] = 1'bX;
end 
// expected result[ 22 ]
initial
begin
	result_expected[22] = 1'bX;
end 
// expected result[ 21 ]
initial
begin
	result_expected[21] = 1'bX;
end 
// expected result[ 20 ]
initial
begin
	result_expected[20] = 1'bX;
end 
// expected result[ 19 ]
initial
begin
	result_expected[19] = 1'bX;
end 
// expected result[ 18 ]
initial
begin
	result_expected[18] = 1'bX;
end 
// expected result[ 17 ]
initial
begin
	result_expected[17] = 1'bX;
end 
// expected result[ 16 ]
initial
begin
	result_expected[16] = 1'bX;
end 
// expected result[ 15 ]
initial
begin
	result_expected[15] = 1'bX;
end 
// expected result[ 14 ]
initial
begin
	result_expected[14] = 1'bX;
end 
// expected result[ 13 ]
initial
begin
	result_expected[13] = 1'bX;
end 
// expected result[ 12 ]
initial
begin
	result_expected[12] = 1'bX;
end 
// expected result[ 11 ]
initial
begin
	result_expected[11] = 1'bX;
end 
// expected result[ 10 ]
initial
begin
	result_expected[10] = 1'bX;
end 
// expected result[ 9 ]
initial
begin
	result_expected[9] = 1'bX;
end 
// expected result[ 8 ]
initial
begin
	result_expected[8] = 1'bX;
end 
// expected result[ 7 ]
initial
begin
	result_expected[7] = 1'bX;
end 
// expected result[ 6 ]
initial
begin
	result_expected[6] = 1'bX;
end 
// expected result[ 5 ]
initial
begin
	result_expected[5] = 1'bX;
end 
// expected result[ 4 ]
initial
begin
	result_expected[4] = 1'bX;
end 
// expected result[ 3 ]
initial
begin
	result_expected[3] = 1'bX;
end 
// expected result[ 2 ]
initial
begin
	result_expected[2] = 1'bX;
end 
// expected result[ 1 ]
initial
begin
	result_expected[1] = 1'bX;
end 
// expected result[ 0 ]
initial
begin
	result_expected[0] = 1'bX;
end 
// expected result8bot[ 7 ]
initial
begin
	result8bot_expected[7] = 1'bX;
end 
// expected result8bot[ 6 ]
initial
begin
	result8bot_expected[6] = 1'bX;
end 
// expected result8bot[ 5 ]
initial
begin
	result8bot_expected[5] = 1'bX;
end 
// expected result8bot[ 4 ]
initial
begin
	result8bot_expected[4] = 1'bX;
end 
// expected result8bot[ 3 ]
initial
begin
	result8bot_expected[3] = 1'bX;
end 
// expected result8bot[ 2 ]
initial
begin
	result8bot_expected[2] = 1'bX;
end 
// expected result8bot[ 1 ]
initial
begin
	result8bot_expected[1] = 1'bX;
end 
// expected result8bot[ 0 ]
initial
begin
	result8bot_expected[0] = 1'bX;
end 

// expected zero
initial
begin
	zero_expected = 1'bX;
end 
// generate trigger
always @(result_expected or result or result8bot_expected or result8bot or zero_expected or zero)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected result = %b | expected result8bot = %b | expected zero = %b | ",result_expected_prev,result8bot_expected_prev,zero_expected_prev);
	$display("| real result = %b | real result8bot = %b | real zero = %b | ",result_prev,result8bot_prev,zero_prev);
`endif
	if (
		( result_expected_prev[0] !== 1'bx ) && ( result_prev[0] !== result_expected_prev[0] )
		&& ((result_expected_prev[0] !== last_result_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port result[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", result_expected_prev);
		$display ("     Real value = %b", result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_result_exp[0] = result_expected_prev[0];
	end
	if (
		( result_expected_prev[1] !== 1'bx ) && ( result_prev[1] !== result_expected_prev[1] )
		&& ((result_expected_prev[1] !== last_result_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port result[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", result_expected_prev);
		$display ("     Real value = %b", result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_result_exp[1] = result_expected_prev[1];
	end
	if (
		( result_expected_prev[2] !== 1'bx ) && ( result_prev[2] !== result_expected_prev[2] )
		&& ((result_expected_prev[2] !== last_result_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port result[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", result_expected_prev);
		$display ("     Real value = %b", result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_result_exp[2] = result_expected_prev[2];
	end
	if (
		( result_expected_prev[3] !== 1'bx ) && ( result_prev[3] !== result_expected_prev[3] )
		&& ((result_expected_prev[3] !== last_result_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port result[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", result_expected_prev);
		$display ("     Real value = %b", result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_result_exp[3] = result_expected_prev[3];
	end
	if (
		( result_expected_prev[4] !== 1'bx ) && ( result_prev[4] !== result_expected_prev[4] )
		&& ((result_expected_prev[4] !== last_result_exp[4]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port result[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", result_expected_prev);
		$display ("     Real value = %b", result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_result_exp[4] = result_expected_prev[4];
	end
	if (
		( result_expected_prev[5] !== 1'bx ) && ( result_prev[5] !== result_expected_prev[5] )
		&& ((result_expected_prev[5] !== last_result_exp[5]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port result[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", result_expected_prev);
		$display ("     Real value = %b", result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_result_exp[5] = result_expected_prev[5];
	end
	if (
		( result_expected_prev[6] !== 1'bx ) && ( result_prev[6] !== result_expected_prev[6] )
		&& ((result_expected_prev[6] !== last_result_exp[6]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port result[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", result_expected_prev);
		$display ("     Real value = %b", result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_result_exp[6] = result_expected_prev[6];
	end
	if (
		( result_expected_prev[7] !== 1'bx ) && ( result_prev[7] !== result_expected_prev[7] )
		&& ((result_expected_prev[7] !== last_result_exp[7]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port result[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", result_expected_prev);
		$display ("     Real value = %b", result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_result_exp[7] = result_expected_prev[7];
	end
	if (
		( result_expected_prev[8] !== 1'bx ) && ( result_prev[8] !== result_expected_prev[8] )
		&& ((result_expected_prev[8] !== last_result_exp[8]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port result[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", result_expected_prev);
		$display ("     Real value = %b", result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_result_exp[8] = result_expected_prev[8];
	end
	if (
		( result_expected_prev[9] !== 1'bx ) && ( result_prev[9] !== result_expected_prev[9] )
		&& ((result_expected_prev[9] !== last_result_exp[9]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port result[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", result_expected_prev);
		$display ("     Real value = %b", result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_result_exp[9] = result_expected_prev[9];
	end
	if (
		( result_expected_prev[10] !== 1'bx ) && ( result_prev[10] !== result_expected_prev[10] )
		&& ((result_expected_prev[10] !== last_result_exp[10]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port result[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", result_expected_prev);
		$display ("     Real value = %b", result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_result_exp[10] = result_expected_prev[10];
	end
	if (
		( result_expected_prev[11] !== 1'bx ) && ( result_prev[11] !== result_expected_prev[11] )
		&& ((result_expected_prev[11] !== last_result_exp[11]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port result[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", result_expected_prev);
		$display ("     Real value = %b", result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_result_exp[11] = result_expected_prev[11];
	end
	if (
		( result_expected_prev[12] !== 1'bx ) && ( result_prev[12] !== result_expected_prev[12] )
		&& ((result_expected_prev[12] !== last_result_exp[12]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port result[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", result_expected_prev);
		$display ("     Real value = %b", result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_result_exp[12] = result_expected_prev[12];
	end
	if (
		( result_expected_prev[13] !== 1'bx ) && ( result_prev[13] !== result_expected_prev[13] )
		&& ((result_expected_prev[13] !== last_result_exp[13]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port result[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", result_expected_prev);
		$display ("     Real value = %b", result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_result_exp[13] = result_expected_prev[13];
	end
	if (
		( result_expected_prev[14] !== 1'bx ) && ( result_prev[14] !== result_expected_prev[14] )
		&& ((result_expected_prev[14] !== last_result_exp[14]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port result[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", result_expected_prev);
		$display ("     Real value = %b", result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_result_exp[14] = result_expected_prev[14];
	end
	if (
		( result_expected_prev[15] !== 1'bx ) && ( result_prev[15] !== result_expected_prev[15] )
		&& ((result_expected_prev[15] !== last_result_exp[15]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port result[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", result_expected_prev);
		$display ("     Real value = %b", result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_result_exp[15] = result_expected_prev[15];
	end
	if (
		( result_expected_prev[16] !== 1'bx ) && ( result_prev[16] !== result_expected_prev[16] )
		&& ((result_expected_prev[16] !== last_result_exp[16]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port result[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", result_expected_prev);
		$display ("     Real value = %b", result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_result_exp[16] = result_expected_prev[16];
	end
	if (
		( result_expected_prev[17] !== 1'bx ) && ( result_prev[17] !== result_expected_prev[17] )
		&& ((result_expected_prev[17] !== last_result_exp[17]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port result[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", result_expected_prev);
		$display ("     Real value = %b", result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_result_exp[17] = result_expected_prev[17];
	end
	if (
		( result_expected_prev[18] !== 1'bx ) && ( result_prev[18] !== result_expected_prev[18] )
		&& ((result_expected_prev[18] !== last_result_exp[18]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port result[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", result_expected_prev);
		$display ("     Real value = %b", result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_result_exp[18] = result_expected_prev[18];
	end
	if (
		( result_expected_prev[19] !== 1'bx ) && ( result_prev[19] !== result_expected_prev[19] )
		&& ((result_expected_prev[19] !== last_result_exp[19]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port result[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", result_expected_prev);
		$display ("     Real value = %b", result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_result_exp[19] = result_expected_prev[19];
	end
	if (
		( result_expected_prev[20] !== 1'bx ) && ( result_prev[20] !== result_expected_prev[20] )
		&& ((result_expected_prev[20] !== last_result_exp[20]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port result[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", result_expected_prev);
		$display ("     Real value = %b", result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_result_exp[20] = result_expected_prev[20];
	end
	if (
		( result_expected_prev[21] !== 1'bx ) && ( result_prev[21] !== result_expected_prev[21] )
		&& ((result_expected_prev[21] !== last_result_exp[21]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port result[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", result_expected_prev);
		$display ("     Real value = %b", result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_result_exp[21] = result_expected_prev[21];
	end
	if (
		( result_expected_prev[22] !== 1'bx ) && ( result_prev[22] !== result_expected_prev[22] )
		&& ((result_expected_prev[22] !== last_result_exp[22]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port result[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", result_expected_prev);
		$display ("     Real value = %b", result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_result_exp[22] = result_expected_prev[22];
	end
	if (
		( result_expected_prev[23] !== 1'bx ) && ( result_prev[23] !== result_expected_prev[23] )
		&& ((result_expected_prev[23] !== last_result_exp[23]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port result[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", result_expected_prev);
		$display ("     Real value = %b", result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_result_exp[23] = result_expected_prev[23];
	end
	if (
		( result_expected_prev[24] !== 1'bx ) && ( result_prev[24] !== result_expected_prev[24] )
		&& ((result_expected_prev[24] !== last_result_exp[24]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port result[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", result_expected_prev);
		$display ("     Real value = %b", result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_result_exp[24] = result_expected_prev[24];
	end
	if (
		( result_expected_prev[25] !== 1'bx ) && ( result_prev[25] !== result_expected_prev[25] )
		&& ((result_expected_prev[25] !== last_result_exp[25]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port result[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", result_expected_prev);
		$display ("     Real value = %b", result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_result_exp[25] = result_expected_prev[25];
	end
	if (
		( result_expected_prev[26] !== 1'bx ) && ( result_prev[26] !== result_expected_prev[26] )
		&& ((result_expected_prev[26] !== last_result_exp[26]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port result[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", result_expected_prev);
		$display ("     Real value = %b", result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_result_exp[26] = result_expected_prev[26];
	end
	if (
		( result_expected_prev[27] !== 1'bx ) && ( result_prev[27] !== result_expected_prev[27] )
		&& ((result_expected_prev[27] !== last_result_exp[27]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port result[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", result_expected_prev);
		$display ("     Real value = %b", result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_result_exp[27] = result_expected_prev[27];
	end
	if (
		( result_expected_prev[28] !== 1'bx ) && ( result_prev[28] !== result_expected_prev[28] )
		&& ((result_expected_prev[28] !== last_result_exp[28]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port result[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", result_expected_prev);
		$display ("     Real value = %b", result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_result_exp[28] = result_expected_prev[28];
	end
	if (
		( result_expected_prev[29] !== 1'bx ) && ( result_prev[29] !== result_expected_prev[29] )
		&& ((result_expected_prev[29] !== last_result_exp[29]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port result[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", result_expected_prev);
		$display ("     Real value = %b", result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_result_exp[29] = result_expected_prev[29];
	end
	if (
		( result_expected_prev[30] !== 1'bx ) && ( result_prev[30] !== result_expected_prev[30] )
		&& ((result_expected_prev[30] !== last_result_exp[30]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port result[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", result_expected_prev);
		$display ("     Real value = %b", result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_result_exp[30] = result_expected_prev[30];
	end
	if (
		( result_expected_prev[31] !== 1'bx ) && ( result_prev[31] !== result_expected_prev[31] )
		&& ((result_expected_prev[31] !== last_result_exp[31]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port result[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", result_expected_prev);
		$display ("     Real value = %b", result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_result_exp[31] = result_expected_prev[31];
	end
	if (
		( result8bot_expected_prev[0] !== 1'bx ) && ( result8bot_prev[0] !== result8bot_expected_prev[0] )
		&& ((result8bot_expected_prev[0] !== last_result8bot_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port result8bot[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", result8bot_expected_prev);
		$display ("     Real value = %b", result8bot_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_result8bot_exp[0] = result8bot_expected_prev[0];
	end
	if (
		( result8bot_expected_prev[1] !== 1'bx ) && ( result8bot_prev[1] !== result8bot_expected_prev[1] )
		&& ((result8bot_expected_prev[1] !== last_result8bot_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port result8bot[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", result8bot_expected_prev);
		$display ("     Real value = %b", result8bot_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_result8bot_exp[1] = result8bot_expected_prev[1];
	end
	if (
		( result8bot_expected_prev[2] !== 1'bx ) && ( result8bot_prev[2] !== result8bot_expected_prev[2] )
		&& ((result8bot_expected_prev[2] !== last_result8bot_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port result8bot[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", result8bot_expected_prev);
		$display ("     Real value = %b", result8bot_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_result8bot_exp[2] = result8bot_expected_prev[2];
	end
	if (
		( result8bot_expected_prev[3] !== 1'bx ) && ( result8bot_prev[3] !== result8bot_expected_prev[3] )
		&& ((result8bot_expected_prev[3] !== last_result8bot_exp[3]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port result8bot[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", result8bot_expected_prev);
		$display ("     Real value = %b", result8bot_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_result8bot_exp[3] = result8bot_expected_prev[3];
	end
	if (
		( result8bot_expected_prev[4] !== 1'bx ) && ( result8bot_prev[4] !== result8bot_expected_prev[4] )
		&& ((result8bot_expected_prev[4] !== last_result8bot_exp[4]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port result8bot[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", result8bot_expected_prev);
		$display ("     Real value = %b", result8bot_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_result8bot_exp[4] = result8bot_expected_prev[4];
	end
	if (
		( result8bot_expected_prev[5] !== 1'bx ) && ( result8bot_prev[5] !== result8bot_expected_prev[5] )
		&& ((result8bot_expected_prev[5] !== last_result8bot_exp[5]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port result8bot[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", result8bot_expected_prev);
		$display ("     Real value = %b", result8bot_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_result8bot_exp[5] = result8bot_expected_prev[5];
	end
	if (
		( result8bot_expected_prev[6] !== 1'bx ) && ( result8bot_prev[6] !== result8bot_expected_prev[6] )
		&& ((result8bot_expected_prev[6] !== last_result8bot_exp[6]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port result8bot[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", result8bot_expected_prev);
		$display ("     Real value = %b", result8bot_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_result8bot_exp[6] = result8bot_expected_prev[6];
	end
	if (
		( result8bot_expected_prev[7] !== 1'bx ) && ( result8bot_prev[7] !== result8bot_expected_prev[7] )
		&& ((result8bot_expected_prev[7] !== last_result8bot_exp[7]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port result8bot[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", result8bot_expected_prev);
		$display ("     Real value = %b", result8bot_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_result8bot_exp[7] = result8bot_expected_prev[7];
	end
	if (
		( zero_expected_prev !== 1'bx ) && ( zero_prev !== zero_expected_prev )
		&& ((zero_expected_prev !== last_zero_exp) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port zero :: @time = %t",  $realtime);
		$display ("     Expected value = %b", zero_expected_prev);
		$display ("     Real value = %b", zero_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_zero_exp = zero_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module testing_alu_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [31:0] A;
reg [2:0] ALU_ctrl;
reg [31:0] B;
// wires                                               
wire [31:0] result;
wire [7:0] result8bot;
wire zero;

wire sampler;                             

// assign statements (if any)                          
testing_alu i1 (
// port map - connection between master ports and signals/registers   
	.A(A),
	.ALU_ctrl(ALU_ctrl),
	.B(B),
	.result(result),
	.result8bot(result8bot),
	.zero(zero)
);
// A[ 31 ]
initial
begin
	A[31] = 1'b0;
end 
// A[ 30 ]
initial
begin
	A[30] = 1'b0;
end 
// A[ 29 ]
initial
begin
	A[29] = 1'b0;
end 
// A[ 28 ]
initial
begin
	A[28] = 1'b0;
end 
// A[ 27 ]
initial
begin
	A[27] = 1'b0;
end 
// A[ 26 ]
initial
begin
	A[26] = 1'b0;
end 
// A[ 25 ]
initial
begin
	A[25] = 1'b0;
end 
// A[ 24 ]
initial
begin
	A[24] = 1'b0;
end 
// A[ 23 ]
initial
begin
	A[23] = 1'b0;
end 
// A[ 22 ]
initial
begin
	A[22] = 1'b0;
end 
// A[ 21 ]
initial
begin
	A[21] = 1'b0;
end 
// A[ 20 ]
initial
begin
	A[20] = 1'b0;
end 
// A[ 19 ]
initial
begin
	A[19] = 1'b0;
end 
// A[ 18 ]
initial
begin
	A[18] = 1'b0;
end 
// A[ 17 ]
initial
begin
	A[17] = 1'b0;
end 
// A[ 16 ]
initial
begin
	A[16] = 1'b0;
end 
// A[ 15 ]
initial
begin
	A[15] = 1'b0;
end 
// A[ 14 ]
initial
begin
	A[14] = 1'b0;
end 
// A[ 13 ]
initial
begin
	A[13] = 1'b0;
end 
// A[ 12 ]
initial
begin
	A[12] = 1'b0;
end 
// A[ 11 ]
initial
begin
	A[11] = 1'b0;
end 
// A[ 10 ]
initial
begin
	A[10] = 1'b0;
end 
// A[ 9 ]
initial
begin
	A[9] = 1'b0;
end 
// A[ 8 ]
initial
begin
	A[8] = 1'b0;
end 
// A[ 7 ]
initial
begin
	A[7] = 1'b0;
end 
// A[ 6 ]
initial
begin
	A[6] = 1'b1;
end 
// A[ 5 ]
initial
begin
	A[5] = 1'b0;
end 
// A[ 4 ]
initial
begin
	A[4] = 1'b1;
end 
// A[ 3 ]
initial
begin
	A[3] = 1'b0;
end 
// A[ 2 ]
initial
begin
	A[2] = 1'b1;
end 
// A[ 1 ]
initial
begin
	A[1] = 1'b0;
end 
// A[ 0 ]
initial
begin
	A[0] = 1'b1;
end 
// ALU_ctrl[ 2 ]
initial
begin
	ALU_ctrl[2] = 1'b1;
end 
// ALU_ctrl[ 1 ]
initial
begin
	ALU_ctrl[1] = 1'b1;
end 
// ALU_ctrl[ 0 ]
initial
begin
	ALU_ctrl[0] = 1'b0;
end 
// B[ 31 ]
initial
begin
	B[31] = 1'b0;
end 
// B[ 30 ]
initial
begin
	B[30] = 1'b0;
end 
// B[ 29 ]
initial
begin
	B[29] = 1'b0;
end 
// B[ 28 ]
initial
begin
	B[28] = 1'b0;
end 
// B[ 27 ]
initial
begin
	B[27] = 1'b0;
end 
// B[ 26 ]
initial
begin
	B[26] = 1'b0;
end 
// B[ 25 ]
initial
begin
	B[25] = 1'b0;
end 
// B[ 24 ]
initial
begin
	B[24] = 1'b0;
end 
// B[ 23 ]
initial
begin
	B[23] = 1'b0;
end 
// B[ 22 ]
initial
begin
	B[22] = 1'b0;
end 
// B[ 21 ]
initial
begin
	B[21] = 1'b0;
end 
// B[ 20 ]
initial
begin
	B[20] = 1'b0;
end 
// B[ 19 ]
initial
begin
	B[19] = 1'b0;
end 
// B[ 18 ]
initial
begin
	B[18] = 1'b0;
end 
// B[ 17 ]
initial
begin
	B[17] = 1'b0;
end 
// B[ 16 ]
initial
begin
	B[16] = 1'b0;
end 
// B[ 15 ]
initial
begin
	B[15] = 1'b0;
end 
// B[ 14 ]
initial
begin
	B[14] = 1'b0;
end 
// B[ 13 ]
initial
begin
	B[13] = 1'b0;
end 
// B[ 12 ]
initial
begin
	B[12] = 1'b0;
end 
// B[ 11 ]
initial
begin
	B[11] = 1'b0;
end 
// B[ 10 ]
initial
begin
	B[10] = 1'b0;
end 
// B[ 9 ]
initial
begin
	B[9] = 1'b0;
end 
// B[ 8 ]
initial
begin
	B[8] = 1'b0;
end 
// B[ 7 ]
initial
begin
	B[7] = 1'b1;
end 
// B[ 6 ]
initial
begin
	B[6] = 1'b0;
end 
// B[ 5 ]
initial
begin
	B[5] = 1'b1;
end 
// B[ 4 ]
initial
begin
	B[4] = 1'b0;
end 
// B[ 3 ]
initial
begin
	B[3] = 1'b1;
end 
// B[ 2 ]
initial
begin
	B[2] = 1'b0;
end 
// B[ 1 ]
initial
begin
	B[1] = 1'b1;
end 
// B[ 0 ]
initial
begin
	B[0] = 1'b0;
end 

testing_alu_vlg_sample_tst tb_sample (
	.A(A),
	.ALU_ctrl(ALU_ctrl),
	.B(B),
	.sampler_tx(sampler)
);

testing_alu_vlg_check_tst tb_out(
	.result(result),
	.result8bot(result8bot),
	.zero(zero),
	.sampler_rx(sampler)
);
endmodule

