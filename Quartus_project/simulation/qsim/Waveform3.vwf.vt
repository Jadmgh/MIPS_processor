// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "03/09/2025 10:28:55"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    testing_reg_file
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module testing_reg_file_vlg_sample_tst(
	RR1,
	RR2,
	wData,
	WR,
	sampler_tx
);
input [4:0] RR1;
input [4:0] RR2;
input [7:0] wData;
input [4:0] WR;
output sampler_tx;

reg sample;
time current_time;
always @(RR1 or RR2 or wData or WR)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module testing_reg_file_vlg_check_tst (
	rd_1,
	rd_2,
	sampler_rx
);
input [7:0] rd_1;
input [7:0] rd_2;
input sampler_rx;

reg [7:0] rd_1_expected;
reg [7:0] rd_2_expected;

reg [7:0] rd_1_prev;
reg [7:0] rd_2_prev;

reg [7:0] rd_1_expected_prev;
reg [7:0] rd_2_expected_prev;

reg [7:0] last_rd_1_exp;
reg [7:0] last_rd_2_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:2] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 2'b1;
end

// update real /o prevs

always @(trigger)
begin
	rd_1_prev = rd_1;
	rd_2_prev = rd_2;
end

// update expected /o prevs

always @(trigger)
begin
	rd_1_expected_prev = rd_1_expected;
	rd_2_expected_prev = rd_2_expected;
end


// expected rd_1[ 7 ]
initial
begin
	rd_1_expected[7] = 1'bX;
end 
// expected rd_1[ 6 ]
initial
begin
	rd_1_expected[6] = 1'bX;
end 
// expected rd_1[ 5 ]
initial
begin
	rd_1_expected[5] = 1'bX;
end 
// expected rd_1[ 4 ]
initial
begin
	rd_1_expected[4] = 1'bX;
end 
// expected rd_1[ 3 ]
initial
begin
	rd_1_expected[3] = 1'bX;
end 
// expected rd_1[ 2 ]
initial
begin
	rd_1_expected[2] = 1'bX;
end 
// expected rd_1[ 1 ]
initial
begin
	rd_1_expected[1] = 1'bX;
end 
// expected rd_1[ 0 ]
initial
begin
	rd_1_expected[0] = 1'bX;
end 
// expected rd_2[ 7 ]
initial
begin
	rd_2_expected[7] = 1'bX;
end 
// expected rd_2[ 6 ]
initial
begin
	rd_2_expected[6] = 1'bX;
end 
// expected rd_2[ 5 ]
initial
begin
	rd_2_expected[5] = 1'bX;
end 
// expected rd_2[ 4 ]
initial
begin
	rd_2_expected[4] = 1'bX;
end 
// expected rd_2[ 3 ]
initial
begin
	rd_2_expected[3] = 1'bX;
end 
// expected rd_2[ 2 ]
initial
begin
	rd_2_expected[2] = 1'bX;
end 
// expected rd_2[ 1 ]
initial
begin
	rd_2_expected[1] = 1'bX;
end 
// expected rd_2[ 0 ]
initial
begin
	rd_2_expected[0] = 1'bX;
end 
// generate trigger
always @(rd_1_expected or rd_1 or rd_2_expected or rd_2)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected rd_1 = %b | expected rd_2 = %b | ",rd_1_expected_prev,rd_2_expected_prev);
	$display("| real rd_1 = %b | real rd_2 = %b | ",rd_1_prev,rd_2_prev);
`endif
	if (
		( rd_1_expected_prev[0] !== 1'bx ) && ( rd_1_prev[0] !== rd_1_expected_prev[0] )
		&& ((rd_1_expected_prev[0] !== last_rd_1_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rd_1[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rd_1_expected_prev);
		$display ("     Real value = %b", rd_1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_rd_1_exp[0] = rd_1_expected_prev[0];
	end
	if (
		( rd_1_expected_prev[1] !== 1'bx ) && ( rd_1_prev[1] !== rd_1_expected_prev[1] )
		&& ((rd_1_expected_prev[1] !== last_rd_1_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rd_1[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rd_1_expected_prev);
		$display ("     Real value = %b", rd_1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_rd_1_exp[1] = rd_1_expected_prev[1];
	end
	if (
		( rd_1_expected_prev[2] !== 1'bx ) && ( rd_1_prev[2] !== rd_1_expected_prev[2] )
		&& ((rd_1_expected_prev[2] !== last_rd_1_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rd_1[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rd_1_expected_prev);
		$display ("     Real value = %b", rd_1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_rd_1_exp[2] = rd_1_expected_prev[2];
	end
	if (
		( rd_1_expected_prev[3] !== 1'bx ) && ( rd_1_prev[3] !== rd_1_expected_prev[3] )
		&& ((rd_1_expected_prev[3] !== last_rd_1_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rd_1[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rd_1_expected_prev);
		$display ("     Real value = %b", rd_1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_rd_1_exp[3] = rd_1_expected_prev[3];
	end
	if (
		( rd_1_expected_prev[4] !== 1'bx ) && ( rd_1_prev[4] !== rd_1_expected_prev[4] )
		&& ((rd_1_expected_prev[4] !== last_rd_1_exp[4]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rd_1[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rd_1_expected_prev);
		$display ("     Real value = %b", rd_1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_rd_1_exp[4] = rd_1_expected_prev[4];
	end
	if (
		( rd_1_expected_prev[5] !== 1'bx ) && ( rd_1_prev[5] !== rd_1_expected_prev[5] )
		&& ((rd_1_expected_prev[5] !== last_rd_1_exp[5]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rd_1[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rd_1_expected_prev);
		$display ("     Real value = %b", rd_1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_rd_1_exp[5] = rd_1_expected_prev[5];
	end
	if (
		( rd_1_expected_prev[6] !== 1'bx ) && ( rd_1_prev[6] !== rd_1_expected_prev[6] )
		&& ((rd_1_expected_prev[6] !== last_rd_1_exp[6]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rd_1[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rd_1_expected_prev);
		$display ("     Real value = %b", rd_1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_rd_1_exp[6] = rd_1_expected_prev[6];
	end
	if (
		( rd_1_expected_prev[7] !== 1'bx ) && ( rd_1_prev[7] !== rd_1_expected_prev[7] )
		&& ((rd_1_expected_prev[7] !== last_rd_1_exp[7]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rd_1[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rd_1_expected_prev);
		$display ("     Real value = %b", rd_1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_rd_1_exp[7] = rd_1_expected_prev[7];
	end
	if (
		( rd_2_expected_prev[0] !== 1'bx ) && ( rd_2_prev[0] !== rd_2_expected_prev[0] )
		&& ((rd_2_expected_prev[0] !== last_rd_2_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rd_2[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rd_2_expected_prev);
		$display ("     Real value = %b", rd_2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_rd_2_exp[0] = rd_2_expected_prev[0];
	end
	if (
		( rd_2_expected_prev[1] !== 1'bx ) && ( rd_2_prev[1] !== rd_2_expected_prev[1] )
		&& ((rd_2_expected_prev[1] !== last_rd_2_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rd_2[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rd_2_expected_prev);
		$display ("     Real value = %b", rd_2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_rd_2_exp[1] = rd_2_expected_prev[1];
	end
	if (
		( rd_2_expected_prev[2] !== 1'bx ) && ( rd_2_prev[2] !== rd_2_expected_prev[2] )
		&& ((rd_2_expected_prev[2] !== last_rd_2_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rd_2[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rd_2_expected_prev);
		$display ("     Real value = %b", rd_2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_rd_2_exp[2] = rd_2_expected_prev[2];
	end
	if (
		( rd_2_expected_prev[3] !== 1'bx ) && ( rd_2_prev[3] !== rd_2_expected_prev[3] )
		&& ((rd_2_expected_prev[3] !== last_rd_2_exp[3]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rd_2[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rd_2_expected_prev);
		$display ("     Real value = %b", rd_2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_rd_2_exp[3] = rd_2_expected_prev[3];
	end
	if (
		( rd_2_expected_prev[4] !== 1'bx ) && ( rd_2_prev[4] !== rd_2_expected_prev[4] )
		&& ((rd_2_expected_prev[4] !== last_rd_2_exp[4]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rd_2[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rd_2_expected_prev);
		$display ("     Real value = %b", rd_2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_rd_2_exp[4] = rd_2_expected_prev[4];
	end
	if (
		( rd_2_expected_prev[5] !== 1'bx ) && ( rd_2_prev[5] !== rd_2_expected_prev[5] )
		&& ((rd_2_expected_prev[5] !== last_rd_2_exp[5]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rd_2[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rd_2_expected_prev);
		$display ("     Real value = %b", rd_2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_rd_2_exp[5] = rd_2_expected_prev[5];
	end
	if (
		( rd_2_expected_prev[6] !== 1'bx ) && ( rd_2_prev[6] !== rd_2_expected_prev[6] )
		&& ((rd_2_expected_prev[6] !== last_rd_2_exp[6]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rd_2[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rd_2_expected_prev);
		$display ("     Real value = %b", rd_2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_rd_2_exp[6] = rd_2_expected_prev[6];
	end
	if (
		( rd_2_expected_prev[7] !== 1'bx ) && ( rd_2_prev[7] !== rd_2_expected_prev[7] )
		&& ((rd_2_expected_prev[7] !== last_rd_2_exp[7]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rd_2[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rd_2_expected_prev);
		$display ("     Real value = %b", rd_2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_rd_2_exp[7] = rd_2_expected_prev[7];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module testing_reg_file_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [4:0] RR1;
reg [4:0] RR2;
reg [7:0] wData;
reg [4:0] WR;
// wires                                               
wire [7:0] rd_1;
wire [7:0] rd_2;

wire sampler;                             

// assign statements (if any)                          
testing_reg_file i1 (
// port map - connection between master ports and signals/registers   
	.rd_1(rd_1),
	.rd_2(rd_2),
	.RR1(RR1),
	.RR2(RR2),
	.wData(wData),
	.WR(WR)
);
// RR1[ 4 ]
initial
begin
	RR1[4] = 1'b0;
end 
// RR1[ 3 ]
initial
begin
	RR1[3] = 1'b0;
end 
// RR1[ 2 ]
initial
begin
	RR1[2] = 1'b0;
end 
// RR1[ 1 ]
initial
begin
	RR1[1] = 1'b1;
end 
// RR1[ 0 ]
initial
begin
	RR1[0] = 1'b0;
end 
// RR2[ 4 ]
initial
begin
	RR2[4] = 1'b0;
end 
// RR2[ 3 ]
initial
begin
	RR2[3] = 1'b0;
end 
// RR2[ 2 ]
initial
begin
	RR2[2] = 1'b1;
end 
// RR2[ 1 ]
initial
begin
	RR2[1] = 1'b1;
end 
// RR2[ 0 ]
initial
begin
	RR2[0] = 1'b0;
end 
// wData[ 7 ]
initial
begin
	wData[7] = 1'b1;
end 
// wData[ 6 ]
initial
begin
	wData[6] = 1'b0;
end 
// wData[ 5 ]
initial
begin
	wData[5] = 1'b0;
end 
// wData[ 4 ]
initial
begin
	wData[4] = 1'b0;
	wData[4] = #380000 1'b1;
end 
// wData[ 3 ]
initial
begin
	wData[3] = 1'b0;
end 
// wData[ 2 ]
initial
begin
	wData[2] = 1'b0;
end 
// wData[ 1 ]
initial
begin
	wData[1] = 1'b1;
end 
// wData[ 0 ]
initial
begin
	wData[0] = 1'b0;
end 
// WR[ 4 ]
initial
begin
	WR[4] = 1'b0;
end 
// WR[ 3 ]
initial
begin
	WR[3] = 1'b0;
end 
// WR[ 2 ]
initial
begin
	WR[2] = 1'b0;
	WR[2] = #300000 1'b1;
	WR[2] = #350000 1'b0;
end 
// WR[ 1 ]
initial
begin
	WR[1] = 1'b1;
end 
// WR[ 0 ]
initial
begin
	WR[0] = 1'b0;
end 

testing_reg_file_vlg_sample_tst tb_sample (
	.RR1(RR1),
	.RR2(RR2),
	.wData(wData),
	.WR(WR),
	.sampler_tx(sampler)
);

testing_reg_file_vlg_check_tst tb_out(
	.rd_1(rd_1),
	.rd_2(rd_2),
	.sampler_rx(sampler)
);
endmodule

