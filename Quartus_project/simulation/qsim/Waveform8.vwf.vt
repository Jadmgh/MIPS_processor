// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "03/09/2025 21:27:35"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    Lab2
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module Lab2_vlg_sample_tst(
	GClock,
	GReset,
	RAM_Clock,
	sampler_tx
);
input  GClock;
input  GReset;
input  RAM_Clock;
output sampler_tx;

reg sample;
time current_time;
always @(GClock or GReset or RAM_Clock)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module Lab2_vlg_check_tst (
	ALUresults,
	ALUsrcn2,
	MemToR,
	next_pc,
	operation,
	PCValue,
	q,
	RAM_output,
	rd1,
	rd2,
	rr1,
	rr2,
	sampler_rx
);
input [7:0] ALUresults;
input [31:0] ALUsrcn2;
input  MemToR;
input [7:0] next_pc;
input [2:0] operation;
input [7:0] PCValue;
input [31:0] q;
input [7:0] RAM_output;
input [7:0] rd1;
input [7:0] rd2;
input [4:0] rr1;
input [4:0] rr2;
input sampler_rx;

reg [7:0] ALUresults_expected;
reg [31:0] ALUsrcn2_expected;
reg  MemToR_expected;
reg [7:0] next_pc_expected;
reg [2:0] operation_expected;
reg [7:0] PCValue_expected;
reg [31:0] q_expected;
reg [7:0] RAM_output_expected;
reg [7:0] rd1_expected;
reg [7:0] rd2_expected;
reg [4:0] rr1_expected;
reg [4:0] rr2_expected;

reg [7:0] ALUresults_prev;
reg [31:0] ALUsrcn2_prev;
reg  MemToR_prev;
reg [7:0] next_pc_prev;
reg [2:0] operation_prev;
reg [7:0] PCValue_prev;
reg [31:0] q_prev;
reg [7:0] RAM_output_prev;
reg [7:0] rd1_prev;
reg [7:0] rd2_prev;
reg [4:0] rr1_prev;
reg [4:0] rr2_prev;

reg [7:0] ALUresults_expected_prev;
reg [31:0] ALUsrcn2_expected_prev;
reg  MemToR_expected_prev;
reg [7:0] next_pc_expected_prev;
reg [2:0] operation_expected_prev;
reg [7:0] PCValue_expected_prev;
reg [31:0] q_expected_prev;
reg [7:0] RAM_output_expected_prev;
reg [7:0] rd1_expected_prev;
reg [7:0] rd2_expected_prev;
reg [4:0] rr1_expected_prev;
reg [4:0] rr2_expected_prev;

reg [7:0] last_ALUresults_exp;
reg [31:0] last_ALUsrcn2_exp;
reg  last_MemToR_exp;
reg [7:0] last_next_pc_exp;
reg [2:0] last_operation_exp;
reg [7:0] last_PCValue_exp;
reg [31:0] last_q_exp;
reg [7:0] last_RAM_output_exp;
reg [7:0] last_rd1_exp;
reg [7:0] last_rd2_exp;
reg [4:0] last_rr1_exp;
reg [4:0] last_rr2_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:12] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 12'b1;
end

// update real /o prevs

always @(trigger)
begin
	ALUresults_prev = ALUresults;
	ALUsrcn2_prev = ALUsrcn2;
	MemToR_prev = MemToR;
	next_pc_prev = next_pc;
	operation_prev = operation;
	PCValue_prev = PCValue;
	q_prev = q;
	RAM_output_prev = RAM_output;
	rd1_prev = rd1;
	rd2_prev = rd2;
	rr1_prev = rr1;
	rr2_prev = rr2;
end

// update expected /o prevs

always @(trigger)
begin
	ALUresults_expected_prev = ALUresults_expected;
	ALUsrcn2_expected_prev = ALUsrcn2_expected;
	MemToR_expected_prev = MemToR_expected;
	next_pc_expected_prev = next_pc_expected;
	operation_expected_prev = operation_expected;
	PCValue_expected_prev = PCValue_expected;
	q_expected_prev = q_expected;
	RAM_output_expected_prev = RAM_output_expected;
	rd1_expected_prev = rd1_expected;
	rd2_expected_prev = rd2_expected;
	rr1_expected_prev = rr1_expected;
	rr2_expected_prev = rr2_expected;
end


// expected RAM_output[ 7 ]
initial
begin
	RAM_output_expected[7] = 1'bX;
end 
// expected RAM_output[ 6 ]
initial
begin
	RAM_output_expected[6] = 1'bX;
end 
// expected RAM_output[ 5 ]
initial
begin
	RAM_output_expected[5] = 1'bX;
end 
// expected RAM_output[ 4 ]
initial
begin
	RAM_output_expected[4] = 1'bX;
end 
// expected RAM_output[ 3 ]
initial
begin
	RAM_output_expected[3] = 1'bX;
end 
// expected RAM_output[ 2 ]
initial
begin
	RAM_output_expected[2] = 1'bX;
end 
// expected RAM_output[ 1 ]
initial
begin
	RAM_output_expected[1] = 1'bX;
end 
// expected RAM_output[ 0 ]
initial
begin
	RAM_output_expected[0] = 1'bX;
end 
// expected q[ 31 ]
initial
begin
	q_expected[31] = 1'bX;
end 
// expected q[ 30 ]
initial
begin
	q_expected[30] = 1'bX;
end 
// expected q[ 29 ]
initial
begin
	q_expected[29] = 1'bX;
end 
// expected q[ 28 ]
initial
begin
	q_expected[28] = 1'bX;
end 
// expected q[ 27 ]
initial
begin
	q_expected[27] = 1'bX;
end 
// expected q[ 26 ]
initial
begin
	q_expected[26] = 1'bX;
end 
// expected q[ 25 ]
initial
begin
	q_expected[25] = 1'bX;
end 
// expected q[ 24 ]
initial
begin
	q_expected[24] = 1'bX;
end 
// expected q[ 23 ]
initial
begin
	q_expected[23] = 1'bX;
end 
// expected q[ 22 ]
initial
begin
	q_expected[22] = 1'bX;
end 
// expected q[ 21 ]
initial
begin
	q_expected[21] = 1'bX;
end 
// expected q[ 20 ]
initial
begin
	q_expected[20] = 1'bX;
end 
// expected q[ 19 ]
initial
begin
	q_expected[19] = 1'bX;
end 
// expected q[ 18 ]
initial
begin
	q_expected[18] = 1'bX;
end 
// expected q[ 17 ]
initial
begin
	q_expected[17] = 1'bX;
end 
// expected q[ 16 ]
initial
begin
	q_expected[16] = 1'bX;
end 
// expected q[ 15 ]
initial
begin
	q_expected[15] = 1'bX;
end 
// expected q[ 14 ]
initial
begin
	q_expected[14] = 1'bX;
end 
// expected q[ 13 ]
initial
begin
	q_expected[13] = 1'bX;
end 
// expected q[ 12 ]
initial
begin
	q_expected[12] = 1'bX;
end 
// expected q[ 11 ]
initial
begin
	q_expected[11] = 1'bX;
end 
// expected q[ 10 ]
initial
begin
	q_expected[10] = 1'bX;
end 
// expected q[ 9 ]
initial
begin
	q_expected[9] = 1'bX;
end 
// expected q[ 8 ]
initial
begin
	q_expected[8] = 1'bX;
end 
// expected q[ 7 ]
initial
begin
	q_expected[7] = 1'bX;
end 
// expected q[ 6 ]
initial
begin
	q_expected[6] = 1'bX;
end 
// expected q[ 5 ]
initial
begin
	q_expected[5] = 1'bX;
end 
// expected q[ 4 ]
initial
begin
	q_expected[4] = 1'bX;
end 
// expected q[ 3 ]
initial
begin
	q_expected[3] = 1'bX;
end 
// expected q[ 2 ]
initial
begin
	q_expected[2] = 1'bX;
end 
// expected q[ 1 ]
initial
begin
	q_expected[1] = 1'bX;
end 
// expected q[ 0 ]
initial
begin
	q_expected[0] = 1'bX;
end 
// expected rr1[ 4 ]
initial
begin
	rr1_expected[4] = 1'bX;
end 
// expected rr1[ 3 ]
initial
begin
	rr1_expected[3] = 1'bX;
end 
// expected rr1[ 2 ]
initial
begin
	rr1_expected[2] = 1'bX;
end 
// expected rr1[ 1 ]
initial
begin
	rr1_expected[1] = 1'bX;
end 
// expected rr1[ 0 ]
initial
begin
	rr1_expected[0] = 1'bX;
end 
// expected rd1[ 7 ]
initial
begin
	rd1_expected[7] = 1'bX;
end 
// expected rd1[ 6 ]
initial
begin
	rd1_expected[6] = 1'bX;
end 
// expected rd1[ 5 ]
initial
begin
	rd1_expected[5] = 1'bX;
end 
// expected rd1[ 4 ]
initial
begin
	rd1_expected[4] = 1'bX;
end 
// expected rd1[ 3 ]
initial
begin
	rd1_expected[3] = 1'bX;
end 
// expected rd1[ 2 ]
initial
begin
	rd1_expected[2] = 1'bX;
end 
// expected rd1[ 1 ]
initial
begin
	rd1_expected[1] = 1'bX;
end 
// expected rd1[ 0 ]
initial
begin
	rd1_expected[0] = 1'bX;
end 
// expected rr2[ 4 ]
initial
begin
	rr2_expected[4] = 1'bX;
end 
// expected rr2[ 3 ]
initial
begin
	rr2_expected[3] = 1'bX;
end 
// expected rr2[ 2 ]
initial
begin
	rr2_expected[2] = 1'bX;
end 
// expected rr2[ 1 ]
initial
begin
	rr2_expected[1] = 1'bX;
end 
// expected rr2[ 0 ]
initial
begin
	rr2_expected[0] = 1'bX;
end 
// expected rd2[ 7 ]
initial
begin
	rd2_expected[7] = 1'bX;
end 
// expected rd2[ 6 ]
initial
begin
	rd2_expected[6] = 1'bX;
end 
// expected rd2[ 5 ]
initial
begin
	rd2_expected[5] = 1'bX;
end 
// expected rd2[ 4 ]
initial
begin
	rd2_expected[4] = 1'bX;
end 
// expected rd2[ 3 ]
initial
begin
	rd2_expected[3] = 1'bX;
end 
// expected rd2[ 2 ]
initial
begin
	rd2_expected[2] = 1'bX;
end 
// expected rd2[ 1 ]
initial
begin
	rd2_expected[1] = 1'bX;
end 
// expected rd2[ 0 ]
initial
begin
	rd2_expected[0] = 1'bX;
end 

// expected MemToR
initial
begin
	MemToR_expected = 1'bX;
end 
// expected ALUresults[ 7 ]
initial
begin
	ALUresults_expected[7] = 1'bX;
end 
// expected ALUresults[ 6 ]
initial
begin
	ALUresults_expected[6] = 1'bX;
end 
// expected ALUresults[ 5 ]
initial
begin
	ALUresults_expected[5] = 1'bX;
end 
// expected ALUresults[ 4 ]
initial
begin
	ALUresults_expected[4] = 1'bX;
end 
// expected ALUresults[ 3 ]
initial
begin
	ALUresults_expected[3] = 1'bX;
end 
// expected ALUresults[ 2 ]
initial
begin
	ALUresults_expected[2] = 1'bX;
end 
// expected ALUresults[ 1 ]
initial
begin
	ALUresults_expected[1] = 1'bX;
end 
// expected ALUresults[ 0 ]
initial
begin
	ALUresults_expected[0] = 1'bX;
end 
// expected operation[ 2 ]
initial
begin
	operation_expected[2] = 1'bX;
end 
// expected operation[ 1 ]
initial
begin
	operation_expected[1] = 1'bX;
end 
// expected operation[ 0 ]
initial
begin
	operation_expected[0] = 1'bX;
end 
// expected ALUsrcn2[ 31 ]
initial
begin
	ALUsrcn2_expected[31] = 1'bX;
end 
// expected ALUsrcn2[ 30 ]
initial
begin
	ALUsrcn2_expected[30] = 1'bX;
end 
// expected ALUsrcn2[ 29 ]
initial
begin
	ALUsrcn2_expected[29] = 1'bX;
end 
// expected ALUsrcn2[ 28 ]
initial
begin
	ALUsrcn2_expected[28] = 1'bX;
end 
// expected ALUsrcn2[ 27 ]
initial
begin
	ALUsrcn2_expected[27] = 1'bX;
end 
// expected ALUsrcn2[ 26 ]
initial
begin
	ALUsrcn2_expected[26] = 1'bX;
end 
// expected ALUsrcn2[ 25 ]
initial
begin
	ALUsrcn2_expected[25] = 1'bX;
end 
// expected ALUsrcn2[ 24 ]
initial
begin
	ALUsrcn2_expected[24] = 1'bX;
end 
// expected ALUsrcn2[ 23 ]
initial
begin
	ALUsrcn2_expected[23] = 1'bX;
end 
// expected ALUsrcn2[ 22 ]
initial
begin
	ALUsrcn2_expected[22] = 1'bX;
end 
// expected ALUsrcn2[ 21 ]
initial
begin
	ALUsrcn2_expected[21] = 1'bX;
end 
// expected ALUsrcn2[ 20 ]
initial
begin
	ALUsrcn2_expected[20] = 1'bX;
end 
// expected ALUsrcn2[ 19 ]
initial
begin
	ALUsrcn2_expected[19] = 1'bX;
end 
// expected ALUsrcn2[ 18 ]
initial
begin
	ALUsrcn2_expected[18] = 1'bX;
end 
// expected ALUsrcn2[ 17 ]
initial
begin
	ALUsrcn2_expected[17] = 1'bX;
end 
// expected ALUsrcn2[ 16 ]
initial
begin
	ALUsrcn2_expected[16] = 1'bX;
end 
// expected ALUsrcn2[ 15 ]
initial
begin
	ALUsrcn2_expected[15] = 1'bX;
end 
// expected ALUsrcn2[ 14 ]
initial
begin
	ALUsrcn2_expected[14] = 1'bX;
end 
// expected ALUsrcn2[ 13 ]
initial
begin
	ALUsrcn2_expected[13] = 1'bX;
end 
// expected ALUsrcn2[ 12 ]
initial
begin
	ALUsrcn2_expected[12] = 1'bX;
end 
// expected ALUsrcn2[ 11 ]
initial
begin
	ALUsrcn2_expected[11] = 1'bX;
end 
// expected ALUsrcn2[ 10 ]
initial
begin
	ALUsrcn2_expected[10] = 1'bX;
end 
// expected ALUsrcn2[ 9 ]
initial
begin
	ALUsrcn2_expected[9] = 1'bX;
end 
// expected ALUsrcn2[ 8 ]
initial
begin
	ALUsrcn2_expected[8] = 1'bX;
end 
// expected ALUsrcn2[ 7 ]
initial
begin
	ALUsrcn2_expected[7] = 1'bX;
end 
// expected ALUsrcn2[ 6 ]
initial
begin
	ALUsrcn2_expected[6] = 1'bX;
end 
// expected ALUsrcn2[ 5 ]
initial
begin
	ALUsrcn2_expected[5] = 1'bX;
end 
// expected ALUsrcn2[ 4 ]
initial
begin
	ALUsrcn2_expected[4] = 1'bX;
end 
// expected ALUsrcn2[ 3 ]
initial
begin
	ALUsrcn2_expected[3] = 1'bX;
end 
// expected ALUsrcn2[ 2 ]
initial
begin
	ALUsrcn2_expected[2] = 1'bX;
end 
// expected ALUsrcn2[ 1 ]
initial
begin
	ALUsrcn2_expected[1] = 1'bX;
end 
// expected ALUsrcn2[ 0 ]
initial
begin
	ALUsrcn2_expected[0] = 1'bX;
end 
// expected next_pc[ 7 ]
initial
begin
	next_pc_expected[7] = 1'bX;
end 
// expected next_pc[ 6 ]
initial
begin
	next_pc_expected[6] = 1'bX;
end 
// expected next_pc[ 5 ]
initial
begin
	next_pc_expected[5] = 1'bX;
end 
// expected next_pc[ 4 ]
initial
begin
	next_pc_expected[4] = 1'bX;
end 
// expected next_pc[ 3 ]
initial
begin
	next_pc_expected[3] = 1'bX;
end 
// expected next_pc[ 2 ]
initial
begin
	next_pc_expected[2] = 1'bX;
end 
// expected next_pc[ 1 ]
initial
begin
	next_pc_expected[1] = 1'bX;
end 
// expected next_pc[ 0 ]
initial
begin
	next_pc_expected[0] = 1'bX;
end 
// expected PCValue[ 7 ]
initial
begin
	PCValue_expected[7] = 1'bX;
end 
// expected PCValue[ 6 ]
initial
begin
	PCValue_expected[6] = 1'bX;
end 
// expected PCValue[ 5 ]
initial
begin
	PCValue_expected[5] = 1'bX;
end 
// expected PCValue[ 4 ]
initial
begin
	PCValue_expected[4] = 1'bX;
end 
// expected PCValue[ 3 ]
initial
begin
	PCValue_expected[3] = 1'bX;
end 
// expected PCValue[ 2 ]
initial
begin
	PCValue_expected[2] = 1'bX;
end 
// expected PCValue[ 1 ]
initial
begin
	PCValue_expected[1] = 1'bX;
end 
// expected PCValue[ 0 ]
initial
begin
	PCValue_expected[0] = 1'bX;
end 
// generate trigger
always @(ALUresults_expected or ALUresults or ALUsrcn2_expected or ALUsrcn2 or MemToR_expected or MemToR or next_pc_expected or next_pc or operation_expected or operation or PCValue_expected or PCValue or q_expected or q or RAM_output_expected or RAM_output or rd1_expected or rd1 or rd2_expected or rd2 or rr1_expected or rr1 or rr2_expected or rr2)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected ALUresults = %b | expected ALUsrcn2 = %b | expected MemToR = %b | expected next_pc = %b | expected operation = %b | expected PCValue = %b | expected q = %b | expected RAM_output = %b | expected rd1 = %b | expected rd2 = %b | expected rr1 = %b | expected rr2 = %b | ",ALUresults_expected_prev,ALUsrcn2_expected_prev,MemToR_expected_prev,next_pc_expected_prev,operation_expected_prev,PCValue_expected_prev,q_expected_prev,RAM_output_expected_prev,rd1_expected_prev,rd2_expected_prev,rr1_expected_prev,rr2_expected_prev);
	$display("| real ALUresults = %b | real ALUsrcn2 = %b | real MemToR = %b | real next_pc = %b | real operation = %b | real PCValue = %b | real q = %b | real RAM_output = %b | real rd1 = %b | real rd2 = %b | real rr1 = %b | real rr2 = %b | ",ALUresults_prev,ALUsrcn2_prev,MemToR_prev,next_pc_prev,operation_prev,PCValue_prev,q_prev,RAM_output_prev,rd1_prev,rd2_prev,rr1_prev,rr2_prev);
`endif
	if (
		( ALUresults_expected_prev[0] !== 1'bx ) && ( ALUresults_prev[0] !== ALUresults_expected_prev[0] )
		&& ((ALUresults_expected_prev[0] !== last_ALUresults_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALUresults[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALUresults_expected_prev);
		$display ("     Real value = %b", ALUresults_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ALUresults_exp[0] = ALUresults_expected_prev[0];
	end
	if (
		( ALUresults_expected_prev[1] !== 1'bx ) && ( ALUresults_prev[1] !== ALUresults_expected_prev[1] )
		&& ((ALUresults_expected_prev[1] !== last_ALUresults_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALUresults[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALUresults_expected_prev);
		$display ("     Real value = %b", ALUresults_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ALUresults_exp[1] = ALUresults_expected_prev[1];
	end
	if (
		( ALUresults_expected_prev[2] !== 1'bx ) && ( ALUresults_prev[2] !== ALUresults_expected_prev[2] )
		&& ((ALUresults_expected_prev[2] !== last_ALUresults_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALUresults[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALUresults_expected_prev);
		$display ("     Real value = %b", ALUresults_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ALUresults_exp[2] = ALUresults_expected_prev[2];
	end
	if (
		( ALUresults_expected_prev[3] !== 1'bx ) && ( ALUresults_prev[3] !== ALUresults_expected_prev[3] )
		&& ((ALUresults_expected_prev[3] !== last_ALUresults_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALUresults[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALUresults_expected_prev);
		$display ("     Real value = %b", ALUresults_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ALUresults_exp[3] = ALUresults_expected_prev[3];
	end
	if (
		( ALUresults_expected_prev[4] !== 1'bx ) && ( ALUresults_prev[4] !== ALUresults_expected_prev[4] )
		&& ((ALUresults_expected_prev[4] !== last_ALUresults_exp[4]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALUresults[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALUresults_expected_prev);
		$display ("     Real value = %b", ALUresults_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ALUresults_exp[4] = ALUresults_expected_prev[4];
	end
	if (
		( ALUresults_expected_prev[5] !== 1'bx ) && ( ALUresults_prev[5] !== ALUresults_expected_prev[5] )
		&& ((ALUresults_expected_prev[5] !== last_ALUresults_exp[5]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALUresults[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALUresults_expected_prev);
		$display ("     Real value = %b", ALUresults_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ALUresults_exp[5] = ALUresults_expected_prev[5];
	end
	if (
		( ALUresults_expected_prev[6] !== 1'bx ) && ( ALUresults_prev[6] !== ALUresults_expected_prev[6] )
		&& ((ALUresults_expected_prev[6] !== last_ALUresults_exp[6]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALUresults[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALUresults_expected_prev);
		$display ("     Real value = %b", ALUresults_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ALUresults_exp[6] = ALUresults_expected_prev[6];
	end
	if (
		( ALUresults_expected_prev[7] !== 1'bx ) && ( ALUresults_prev[7] !== ALUresults_expected_prev[7] )
		&& ((ALUresults_expected_prev[7] !== last_ALUresults_exp[7]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALUresults[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALUresults_expected_prev);
		$display ("     Real value = %b", ALUresults_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ALUresults_exp[7] = ALUresults_expected_prev[7];
	end
	if (
		( ALUsrcn2_expected_prev[0] !== 1'bx ) && ( ALUsrcn2_prev[0] !== ALUsrcn2_expected_prev[0] )
		&& ((ALUsrcn2_expected_prev[0] !== last_ALUsrcn2_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALUsrcn2[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALUsrcn2_expected_prev);
		$display ("     Real value = %b", ALUsrcn2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_ALUsrcn2_exp[0] = ALUsrcn2_expected_prev[0];
	end
	if (
		( ALUsrcn2_expected_prev[1] !== 1'bx ) && ( ALUsrcn2_prev[1] !== ALUsrcn2_expected_prev[1] )
		&& ((ALUsrcn2_expected_prev[1] !== last_ALUsrcn2_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALUsrcn2[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALUsrcn2_expected_prev);
		$display ("     Real value = %b", ALUsrcn2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_ALUsrcn2_exp[1] = ALUsrcn2_expected_prev[1];
	end
	if (
		( ALUsrcn2_expected_prev[2] !== 1'bx ) && ( ALUsrcn2_prev[2] !== ALUsrcn2_expected_prev[2] )
		&& ((ALUsrcn2_expected_prev[2] !== last_ALUsrcn2_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALUsrcn2[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALUsrcn2_expected_prev);
		$display ("     Real value = %b", ALUsrcn2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_ALUsrcn2_exp[2] = ALUsrcn2_expected_prev[2];
	end
	if (
		( ALUsrcn2_expected_prev[3] !== 1'bx ) && ( ALUsrcn2_prev[3] !== ALUsrcn2_expected_prev[3] )
		&& ((ALUsrcn2_expected_prev[3] !== last_ALUsrcn2_exp[3]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALUsrcn2[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALUsrcn2_expected_prev);
		$display ("     Real value = %b", ALUsrcn2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_ALUsrcn2_exp[3] = ALUsrcn2_expected_prev[3];
	end
	if (
		( ALUsrcn2_expected_prev[4] !== 1'bx ) && ( ALUsrcn2_prev[4] !== ALUsrcn2_expected_prev[4] )
		&& ((ALUsrcn2_expected_prev[4] !== last_ALUsrcn2_exp[4]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALUsrcn2[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALUsrcn2_expected_prev);
		$display ("     Real value = %b", ALUsrcn2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_ALUsrcn2_exp[4] = ALUsrcn2_expected_prev[4];
	end
	if (
		( ALUsrcn2_expected_prev[5] !== 1'bx ) && ( ALUsrcn2_prev[5] !== ALUsrcn2_expected_prev[5] )
		&& ((ALUsrcn2_expected_prev[5] !== last_ALUsrcn2_exp[5]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALUsrcn2[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALUsrcn2_expected_prev);
		$display ("     Real value = %b", ALUsrcn2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_ALUsrcn2_exp[5] = ALUsrcn2_expected_prev[5];
	end
	if (
		( ALUsrcn2_expected_prev[6] !== 1'bx ) && ( ALUsrcn2_prev[6] !== ALUsrcn2_expected_prev[6] )
		&& ((ALUsrcn2_expected_prev[6] !== last_ALUsrcn2_exp[6]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALUsrcn2[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALUsrcn2_expected_prev);
		$display ("     Real value = %b", ALUsrcn2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_ALUsrcn2_exp[6] = ALUsrcn2_expected_prev[6];
	end
	if (
		( ALUsrcn2_expected_prev[7] !== 1'bx ) && ( ALUsrcn2_prev[7] !== ALUsrcn2_expected_prev[7] )
		&& ((ALUsrcn2_expected_prev[7] !== last_ALUsrcn2_exp[7]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALUsrcn2[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALUsrcn2_expected_prev);
		$display ("     Real value = %b", ALUsrcn2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_ALUsrcn2_exp[7] = ALUsrcn2_expected_prev[7];
	end
	if (
		( ALUsrcn2_expected_prev[8] !== 1'bx ) && ( ALUsrcn2_prev[8] !== ALUsrcn2_expected_prev[8] )
		&& ((ALUsrcn2_expected_prev[8] !== last_ALUsrcn2_exp[8]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALUsrcn2[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALUsrcn2_expected_prev);
		$display ("     Real value = %b", ALUsrcn2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_ALUsrcn2_exp[8] = ALUsrcn2_expected_prev[8];
	end
	if (
		( ALUsrcn2_expected_prev[9] !== 1'bx ) && ( ALUsrcn2_prev[9] !== ALUsrcn2_expected_prev[9] )
		&& ((ALUsrcn2_expected_prev[9] !== last_ALUsrcn2_exp[9]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALUsrcn2[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALUsrcn2_expected_prev);
		$display ("     Real value = %b", ALUsrcn2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_ALUsrcn2_exp[9] = ALUsrcn2_expected_prev[9];
	end
	if (
		( ALUsrcn2_expected_prev[10] !== 1'bx ) && ( ALUsrcn2_prev[10] !== ALUsrcn2_expected_prev[10] )
		&& ((ALUsrcn2_expected_prev[10] !== last_ALUsrcn2_exp[10]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALUsrcn2[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALUsrcn2_expected_prev);
		$display ("     Real value = %b", ALUsrcn2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_ALUsrcn2_exp[10] = ALUsrcn2_expected_prev[10];
	end
	if (
		( ALUsrcn2_expected_prev[11] !== 1'bx ) && ( ALUsrcn2_prev[11] !== ALUsrcn2_expected_prev[11] )
		&& ((ALUsrcn2_expected_prev[11] !== last_ALUsrcn2_exp[11]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALUsrcn2[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALUsrcn2_expected_prev);
		$display ("     Real value = %b", ALUsrcn2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_ALUsrcn2_exp[11] = ALUsrcn2_expected_prev[11];
	end
	if (
		( ALUsrcn2_expected_prev[12] !== 1'bx ) && ( ALUsrcn2_prev[12] !== ALUsrcn2_expected_prev[12] )
		&& ((ALUsrcn2_expected_prev[12] !== last_ALUsrcn2_exp[12]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALUsrcn2[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALUsrcn2_expected_prev);
		$display ("     Real value = %b", ALUsrcn2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_ALUsrcn2_exp[12] = ALUsrcn2_expected_prev[12];
	end
	if (
		( ALUsrcn2_expected_prev[13] !== 1'bx ) && ( ALUsrcn2_prev[13] !== ALUsrcn2_expected_prev[13] )
		&& ((ALUsrcn2_expected_prev[13] !== last_ALUsrcn2_exp[13]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALUsrcn2[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALUsrcn2_expected_prev);
		$display ("     Real value = %b", ALUsrcn2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_ALUsrcn2_exp[13] = ALUsrcn2_expected_prev[13];
	end
	if (
		( ALUsrcn2_expected_prev[14] !== 1'bx ) && ( ALUsrcn2_prev[14] !== ALUsrcn2_expected_prev[14] )
		&& ((ALUsrcn2_expected_prev[14] !== last_ALUsrcn2_exp[14]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALUsrcn2[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALUsrcn2_expected_prev);
		$display ("     Real value = %b", ALUsrcn2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_ALUsrcn2_exp[14] = ALUsrcn2_expected_prev[14];
	end
	if (
		( ALUsrcn2_expected_prev[15] !== 1'bx ) && ( ALUsrcn2_prev[15] !== ALUsrcn2_expected_prev[15] )
		&& ((ALUsrcn2_expected_prev[15] !== last_ALUsrcn2_exp[15]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALUsrcn2[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALUsrcn2_expected_prev);
		$display ("     Real value = %b", ALUsrcn2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_ALUsrcn2_exp[15] = ALUsrcn2_expected_prev[15];
	end
	if (
		( ALUsrcn2_expected_prev[16] !== 1'bx ) && ( ALUsrcn2_prev[16] !== ALUsrcn2_expected_prev[16] )
		&& ((ALUsrcn2_expected_prev[16] !== last_ALUsrcn2_exp[16]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALUsrcn2[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALUsrcn2_expected_prev);
		$display ("     Real value = %b", ALUsrcn2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_ALUsrcn2_exp[16] = ALUsrcn2_expected_prev[16];
	end
	if (
		( ALUsrcn2_expected_prev[17] !== 1'bx ) && ( ALUsrcn2_prev[17] !== ALUsrcn2_expected_prev[17] )
		&& ((ALUsrcn2_expected_prev[17] !== last_ALUsrcn2_exp[17]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALUsrcn2[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALUsrcn2_expected_prev);
		$display ("     Real value = %b", ALUsrcn2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_ALUsrcn2_exp[17] = ALUsrcn2_expected_prev[17];
	end
	if (
		( ALUsrcn2_expected_prev[18] !== 1'bx ) && ( ALUsrcn2_prev[18] !== ALUsrcn2_expected_prev[18] )
		&& ((ALUsrcn2_expected_prev[18] !== last_ALUsrcn2_exp[18]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALUsrcn2[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALUsrcn2_expected_prev);
		$display ("     Real value = %b", ALUsrcn2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_ALUsrcn2_exp[18] = ALUsrcn2_expected_prev[18];
	end
	if (
		( ALUsrcn2_expected_prev[19] !== 1'bx ) && ( ALUsrcn2_prev[19] !== ALUsrcn2_expected_prev[19] )
		&& ((ALUsrcn2_expected_prev[19] !== last_ALUsrcn2_exp[19]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALUsrcn2[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALUsrcn2_expected_prev);
		$display ("     Real value = %b", ALUsrcn2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_ALUsrcn2_exp[19] = ALUsrcn2_expected_prev[19];
	end
	if (
		( ALUsrcn2_expected_prev[20] !== 1'bx ) && ( ALUsrcn2_prev[20] !== ALUsrcn2_expected_prev[20] )
		&& ((ALUsrcn2_expected_prev[20] !== last_ALUsrcn2_exp[20]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALUsrcn2[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALUsrcn2_expected_prev);
		$display ("     Real value = %b", ALUsrcn2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_ALUsrcn2_exp[20] = ALUsrcn2_expected_prev[20];
	end
	if (
		( ALUsrcn2_expected_prev[21] !== 1'bx ) && ( ALUsrcn2_prev[21] !== ALUsrcn2_expected_prev[21] )
		&& ((ALUsrcn2_expected_prev[21] !== last_ALUsrcn2_exp[21]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALUsrcn2[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALUsrcn2_expected_prev);
		$display ("     Real value = %b", ALUsrcn2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_ALUsrcn2_exp[21] = ALUsrcn2_expected_prev[21];
	end
	if (
		( ALUsrcn2_expected_prev[22] !== 1'bx ) && ( ALUsrcn2_prev[22] !== ALUsrcn2_expected_prev[22] )
		&& ((ALUsrcn2_expected_prev[22] !== last_ALUsrcn2_exp[22]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALUsrcn2[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALUsrcn2_expected_prev);
		$display ("     Real value = %b", ALUsrcn2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_ALUsrcn2_exp[22] = ALUsrcn2_expected_prev[22];
	end
	if (
		( ALUsrcn2_expected_prev[23] !== 1'bx ) && ( ALUsrcn2_prev[23] !== ALUsrcn2_expected_prev[23] )
		&& ((ALUsrcn2_expected_prev[23] !== last_ALUsrcn2_exp[23]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALUsrcn2[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALUsrcn2_expected_prev);
		$display ("     Real value = %b", ALUsrcn2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_ALUsrcn2_exp[23] = ALUsrcn2_expected_prev[23];
	end
	if (
		( ALUsrcn2_expected_prev[24] !== 1'bx ) && ( ALUsrcn2_prev[24] !== ALUsrcn2_expected_prev[24] )
		&& ((ALUsrcn2_expected_prev[24] !== last_ALUsrcn2_exp[24]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALUsrcn2[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALUsrcn2_expected_prev);
		$display ("     Real value = %b", ALUsrcn2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_ALUsrcn2_exp[24] = ALUsrcn2_expected_prev[24];
	end
	if (
		( ALUsrcn2_expected_prev[25] !== 1'bx ) && ( ALUsrcn2_prev[25] !== ALUsrcn2_expected_prev[25] )
		&& ((ALUsrcn2_expected_prev[25] !== last_ALUsrcn2_exp[25]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALUsrcn2[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALUsrcn2_expected_prev);
		$display ("     Real value = %b", ALUsrcn2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_ALUsrcn2_exp[25] = ALUsrcn2_expected_prev[25];
	end
	if (
		( ALUsrcn2_expected_prev[26] !== 1'bx ) && ( ALUsrcn2_prev[26] !== ALUsrcn2_expected_prev[26] )
		&& ((ALUsrcn2_expected_prev[26] !== last_ALUsrcn2_exp[26]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALUsrcn2[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALUsrcn2_expected_prev);
		$display ("     Real value = %b", ALUsrcn2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_ALUsrcn2_exp[26] = ALUsrcn2_expected_prev[26];
	end
	if (
		( ALUsrcn2_expected_prev[27] !== 1'bx ) && ( ALUsrcn2_prev[27] !== ALUsrcn2_expected_prev[27] )
		&& ((ALUsrcn2_expected_prev[27] !== last_ALUsrcn2_exp[27]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALUsrcn2[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALUsrcn2_expected_prev);
		$display ("     Real value = %b", ALUsrcn2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_ALUsrcn2_exp[27] = ALUsrcn2_expected_prev[27];
	end
	if (
		( ALUsrcn2_expected_prev[28] !== 1'bx ) && ( ALUsrcn2_prev[28] !== ALUsrcn2_expected_prev[28] )
		&& ((ALUsrcn2_expected_prev[28] !== last_ALUsrcn2_exp[28]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALUsrcn2[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALUsrcn2_expected_prev);
		$display ("     Real value = %b", ALUsrcn2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_ALUsrcn2_exp[28] = ALUsrcn2_expected_prev[28];
	end
	if (
		( ALUsrcn2_expected_prev[29] !== 1'bx ) && ( ALUsrcn2_prev[29] !== ALUsrcn2_expected_prev[29] )
		&& ((ALUsrcn2_expected_prev[29] !== last_ALUsrcn2_exp[29]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALUsrcn2[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALUsrcn2_expected_prev);
		$display ("     Real value = %b", ALUsrcn2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_ALUsrcn2_exp[29] = ALUsrcn2_expected_prev[29];
	end
	if (
		( ALUsrcn2_expected_prev[30] !== 1'bx ) && ( ALUsrcn2_prev[30] !== ALUsrcn2_expected_prev[30] )
		&& ((ALUsrcn2_expected_prev[30] !== last_ALUsrcn2_exp[30]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALUsrcn2[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALUsrcn2_expected_prev);
		$display ("     Real value = %b", ALUsrcn2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_ALUsrcn2_exp[30] = ALUsrcn2_expected_prev[30];
	end
	if (
		( ALUsrcn2_expected_prev[31] !== 1'bx ) && ( ALUsrcn2_prev[31] !== ALUsrcn2_expected_prev[31] )
		&& ((ALUsrcn2_expected_prev[31] !== last_ALUsrcn2_exp[31]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALUsrcn2[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALUsrcn2_expected_prev);
		$display ("     Real value = %b", ALUsrcn2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_ALUsrcn2_exp[31] = ALUsrcn2_expected_prev[31];
	end
	if (
		( MemToR_expected_prev !== 1'bx ) && ( MemToR_prev !== MemToR_expected_prev )
		&& ((MemToR_expected_prev !== last_MemToR_exp) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MemToR :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MemToR_expected_prev);
		$display ("     Real value = %b", MemToR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_MemToR_exp = MemToR_expected_prev;
	end
	if (
		( next_pc_expected_prev[0] !== 1'bx ) && ( next_pc_prev[0] !== next_pc_expected_prev[0] )
		&& ((next_pc_expected_prev[0] !== last_next_pc_exp[0]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port next_pc[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", next_pc_expected_prev);
		$display ("     Real value = %b", next_pc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_next_pc_exp[0] = next_pc_expected_prev[0];
	end
	if (
		( next_pc_expected_prev[1] !== 1'bx ) && ( next_pc_prev[1] !== next_pc_expected_prev[1] )
		&& ((next_pc_expected_prev[1] !== last_next_pc_exp[1]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port next_pc[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", next_pc_expected_prev);
		$display ("     Real value = %b", next_pc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_next_pc_exp[1] = next_pc_expected_prev[1];
	end
	if (
		( next_pc_expected_prev[2] !== 1'bx ) && ( next_pc_prev[2] !== next_pc_expected_prev[2] )
		&& ((next_pc_expected_prev[2] !== last_next_pc_exp[2]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port next_pc[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", next_pc_expected_prev);
		$display ("     Real value = %b", next_pc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_next_pc_exp[2] = next_pc_expected_prev[2];
	end
	if (
		( next_pc_expected_prev[3] !== 1'bx ) && ( next_pc_prev[3] !== next_pc_expected_prev[3] )
		&& ((next_pc_expected_prev[3] !== last_next_pc_exp[3]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port next_pc[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", next_pc_expected_prev);
		$display ("     Real value = %b", next_pc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_next_pc_exp[3] = next_pc_expected_prev[3];
	end
	if (
		( next_pc_expected_prev[4] !== 1'bx ) && ( next_pc_prev[4] !== next_pc_expected_prev[4] )
		&& ((next_pc_expected_prev[4] !== last_next_pc_exp[4]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port next_pc[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", next_pc_expected_prev);
		$display ("     Real value = %b", next_pc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_next_pc_exp[4] = next_pc_expected_prev[4];
	end
	if (
		( next_pc_expected_prev[5] !== 1'bx ) && ( next_pc_prev[5] !== next_pc_expected_prev[5] )
		&& ((next_pc_expected_prev[5] !== last_next_pc_exp[5]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port next_pc[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", next_pc_expected_prev);
		$display ("     Real value = %b", next_pc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_next_pc_exp[5] = next_pc_expected_prev[5];
	end
	if (
		( next_pc_expected_prev[6] !== 1'bx ) && ( next_pc_prev[6] !== next_pc_expected_prev[6] )
		&& ((next_pc_expected_prev[6] !== last_next_pc_exp[6]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port next_pc[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", next_pc_expected_prev);
		$display ("     Real value = %b", next_pc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_next_pc_exp[6] = next_pc_expected_prev[6];
	end
	if (
		( next_pc_expected_prev[7] !== 1'bx ) && ( next_pc_prev[7] !== next_pc_expected_prev[7] )
		&& ((next_pc_expected_prev[7] !== last_next_pc_exp[7]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port next_pc[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", next_pc_expected_prev);
		$display ("     Real value = %b", next_pc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_next_pc_exp[7] = next_pc_expected_prev[7];
	end
	if (
		( operation_expected_prev[0] !== 1'bx ) && ( operation_prev[0] !== operation_expected_prev[0] )
		&& ((operation_expected_prev[0] !== last_operation_exp[0]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port operation[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", operation_expected_prev);
		$display ("     Real value = %b", operation_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_operation_exp[0] = operation_expected_prev[0];
	end
	if (
		( operation_expected_prev[1] !== 1'bx ) && ( operation_prev[1] !== operation_expected_prev[1] )
		&& ((operation_expected_prev[1] !== last_operation_exp[1]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port operation[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", operation_expected_prev);
		$display ("     Real value = %b", operation_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_operation_exp[1] = operation_expected_prev[1];
	end
	if (
		( operation_expected_prev[2] !== 1'bx ) && ( operation_prev[2] !== operation_expected_prev[2] )
		&& ((operation_expected_prev[2] !== last_operation_exp[2]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port operation[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", operation_expected_prev);
		$display ("     Real value = %b", operation_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_operation_exp[2] = operation_expected_prev[2];
	end
	if (
		( PCValue_expected_prev[0] !== 1'bx ) && ( PCValue_prev[0] !== PCValue_expected_prev[0] )
		&& ((PCValue_expected_prev[0] !== last_PCValue_exp[0]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PCValue[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PCValue_expected_prev);
		$display ("     Real value = %b", PCValue_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_PCValue_exp[0] = PCValue_expected_prev[0];
	end
	if (
		( PCValue_expected_prev[1] !== 1'bx ) && ( PCValue_prev[1] !== PCValue_expected_prev[1] )
		&& ((PCValue_expected_prev[1] !== last_PCValue_exp[1]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PCValue[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PCValue_expected_prev);
		$display ("     Real value = %b", PCValue_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_PCValue_exp[1] = PCValue_expected_prev[1];
	end
	if (
		( PCValue_expected_prev[2] !== 1'bx ) && ( PCValue_prev[2] !== PCValue_expected_prev[2] )
		&& ((PCValue_expected_prev[2] !== last_PCValue_exp[2]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PCValue[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PCValue_expected_prev);
		$display ("     Real value = %b", PCValue_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_PCValue_exp[2] = PCValue_expected_prev[2];
	end
	if (
		( PCValue_expected_prev[3] !== 1'bx ) && ( PCValue_prev[3] !== PCValue_expected_prev[3] )
		&& ((PCValue_expected_prev[3] !== last_PCValue_exp[3]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PCValue[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PCValue_expected_prev);
		$display ("     Real value = %b", PCValue_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_PCValue_exp[3] = PCValue_expected_prev[3];
	end
	if (
		( PCValue_expected_prev[4] !== 1'bx ) && ( PCValue_prev[4] !== PCValue_expected_prev[4] )
		&& ((PCValue_expected_prev[4] !== last_PCValue_exp[4]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PCValue[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PCValue_expected_prev);
		$display ("     Real value = %b", PCValue_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_PCValue_exp[4] = PCValue_expected_prev[4];
	end
	if (
		( PCValue_expected_prev[5] !== 1'bx ) && ( PCValue_prev[5] !== PCValue_expected_prev[5] )
		&& ((PCValue_expected_prev[5] !== last_PCValue_exp[5]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PCValue[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PCValue_expected_prev);
		$display ("     Real value = %b", PCValue_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_PCValue_exp[5] = PCValue_expected_prev[5];
	end
	if (
		( PCValue_expected_prev[6] !== 1'bx ) && ( PCValue_prev[6] !== PCValue_expected_prev[6] )
		&& ((PCValue_expected_prev[6] !== last_PCValue_exp[6]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PCValue[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PCValue_expected_prev);
		$display ("     Real value = %b", PCValue_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_PCValue_exp[6] = PCValue_expected_prev[6];
	end
	if (
		( PCValue_expected_prev[7] !== 1'bx ) && ( PCValue_prev[7] !== PCValue_expected_prev[7] )
		&& ((PCValue_expected_prev[7] !== last_PCValue_exp[7]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PCValue[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PCValue_expected_prev);
		$display ("     Real value = %b", PCValue_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_PCValue_exp[7] = PCValue_expected_prev[7];
	end
	if (
		( q_expected_prev[0] !== 1'bx ) && ( q_prev[0] !== q_expected_prev[0] )
		&& ((q_expected_prev[0] !== last_q_exp[0]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port q[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", q_expected_prev);
		$display ("     Real value = %b", q_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_q_exp[0] = q_expected_prev[0];
	end
	if (
		( q_expected_prev[1] !== 1'bx ) && ( q_prev[1] !== q_expected_prev[1] )
		&& ((q_expected_prev[1] !== last_q_exp[1]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port q[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", q_expected_prev);
		$display ("     Real value = %b", q_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_q_exp[1] = q_expected_prev[1];
	end
	if (
		( q_expected_prev[2] !== 1'bx ) && ( q_prev[2] !== q_expected_prev[2] )
		&& ((q_expected_prev[2] !== last_q_exp[2]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port q[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", q_expected_prev);
		$display ("     Real value = %b", q_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_q_exp[2] = q_expected_prev[2];
	end
	if (
		( q_expected_prev[3] !== 1'bx ) && ( q_prev[3] !== q_expected_prev[3] )
		&& ((q_expected_prev[3] !== last_q_exp[3]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port q[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", q_expected_prev);
		$display ("     Real value = %b", q_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_q_exp[3] = q_expected_prev[3];
	end
	if (
		( q_expected_prev[4] !== 1'bx ) && ( q_prev[4] !== q_expected_prev[4] )
		&& ((q_expected_prev[4] !== last_q_exp[4]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port q[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", q_expected_prev);
		$display ("     Real value = %b", q_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_q_exp[4] = q_expected_prev[4];
	end
	if (
		( q_expected_prev[5] !== 1'bx ) && ( q_prev[5] !== q_expected_prev[5] )
		&& ((q_expected_prev[5] !== last_q_exp[5]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port q[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", q_expected_prev);
		$display ("     Real value = %b", q_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_q_exp[5] = q_expected_prev[5];
	end
	if (
		( q_expected_prev[6] !== 1'bx ) && ( q_prev[6] !== q_expected_prev[6] )
		&& ((q_expected_prev[6] !== last_q_exp[6]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port q[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", q_expected_prev);
		$display ("     Real value = %b", q_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_q_exp[6] = q_expected_prev[6];
	end
	if (
		( q_expected_prev[7] !== 1'bx ) && ( q_prev[7] !== q_expected_prev[7] )
		&& ((q_expected_prev[7] !== last_q_exp[7]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port q[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", q_expected_prev);
		$display ("     Real value = %b", q_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_q_exp[7] = q_expected_prev[7];
	end
	if (
		( q_expected_prev[8] !== 1'bx ) && ( q_prev[8] !== q_expected_prev[8] )
		&& ((q_expected_prev[8] !== last_q_exp[8]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port q[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", q_expected_prev);
		$display ("     Real value = %b", q_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_q_exp[8] = q_expected_prev[8];
	end
	if (
		( q_expected_prev[9] !== 1'bx ) && ( q_prev[9] !== q_expected_prev[9] )
		&& ((q_expected_prev[9] !== last_q_exp[9]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port q[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", q_expected_prev);
		$display ("     Real value = %b", q_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_q_exp[9] = q_expected_prev[9];
	end
	if (
		( q_expected_prev[10] !== 1'bx ) && ( q_prev[10] !== q_expected_prev[10] )
		&& ((q_expected_prev[10] !== last_q_exp[10]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port q[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", q_expected_prev);
		$display ("     Real value = %b", q_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_q_exp[10] = q_expected_prev[10];
	end
	if (
		( q_expected_prev[11] !== 1'bx ) && ( q_prev[11] !== q_expected_prev[11] )
		&& ((q_expected_prev[11] !== last_q_exp[11]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port q[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", q_expected_prev);
		$display ("     Real value = %b", q_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_q_exp[11] = q_expected_prev[11];
	end
	if (
		( q_expected_prev[12] !== 1'bx ) && ( q_prev[12] !== q_expected_prev[12] )
		&& ((q_expected_prev[12] !== last_q_exp[12]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port q[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", q_expected_prev);
		$display ("     Real value = %b", q_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_q_exp[12] = q_expected_prev[12];
	end
	if (
		( q_expected_prev[13] !== 1'bx ) && ( q_prev[13] !== q_expected_prev[13] )
		&& ((q_expected_prev[13] !== last_q_exp[13]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port q[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", q_expected_prev);
		$display ("     Real value = %b", q_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_q_exp[13] = q_expected_prev[13];
	end
	if (
		( q_expected_prev[14] !== 1'bx ) && ( q_prev[14] !== q_expected_prev[14] )
		&& ((q_expected_prev[14] !== last_q_exp[14]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port q[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", q_expected_prev);
		$display ("     Real value = %b", q_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_q_exp[14] = q_expected_prev[14];
	end
	if (
		( q_expected_prev[15] !== 1'bx ) && ( q_prev[15] !== q_expected_prev[15] )
		&& ((q_expected_prev[15] !== last_q_exp[15]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port q[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", q_expected_prev);
		$display ("     Real value = %b", q_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_q_exp[15] = q_expected_prev[15];
	end
	if (
		( q_expected_prev[16] !== 1'bx ) && ( q_prev[16] !== q_expected_prev[16] )
		&& ((q_expected_prev[16] !== last_q_exp[16]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port q[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", q_expected_prev);
		$display ("     Real value = %b", q_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_q_exp[16] = q_expected_prev[16];
	end
	if (
		( q_expected_prev[17] !== 1'bx ) && ( q_prev[17] !== q_expected_prev[17] )
		&& ((q_expected_prev[17] !== last_q_exp[17]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port q[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", q_expected_prev);
		$display ("     Real value = %b", q_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_q_exp[17] = q_expected_prev[17];
	end
	if (
		( q_expected_prev[18] !== 1'bx ) && ( q_prev[18] !== q_expected_prev[18] )
		&& ((q_expected_prev[18] !== last_q_exp[18]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port q[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", q_expected_prev);
		$display ("     Real value = %b", q_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_q_exp[18] = q_expected_prev[18];
	end
	if (
		( q_expected_prev[19] !== 1'bx ) && ( q_prev[19] !== q_expected_prev[19] )
		&& ((q_expected_prev[19] !== last_q_exp[19]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port q[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", q_expected_prev);
		$display ("     Real value = %b", q_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_q_exp[19] = q_expected_prev[19];
	end
	if (
		( q_expected_prev[20] !== 1'bx ) && ( q_prev[20] !== q_expected_prev[20] )
		&& ((q_expected_prev[20] !== last_q_exp[20]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port q[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", q_expected_prev);
		$display ("     Real value = %b", q_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_q_exp[20] = q_expected_prev[20];
	end
	if (
		( q_expected_prev[21] !== 1'bx ) && ( q_prev[21] !== q_expected_prev[21] )
		&& ((q_expected_prev[21] !== last_q_exp[21]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port q[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", q_expected_prev);
		$display ("     Real value = %b", q_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_q_exp[21] = q_expected_prev[21];
	end
	if (
		( q_expected_prev[22] !== 1'bx ) && ( q_prev[22] !== q_expected_prev[22] )
		&& ((q_expected_prev[22] !== last_q_exp[22]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port q[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", q_expected_prev);
		$display ("     Real value = %b", q_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_q_exp[22] = q_expected_prev[22];
	end
	if (
		( q_expected_prev[23] !== 1'bx ) && ( q_prev[23] !== q_expected_prev[23] )
		&& ((q_expected_prev[23] !== last_q_exp[23]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port q[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", q_expected_prev);
		$display ("     Real value = %b", q_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_q_exp[23] = q_expected_prev[23];
	end
	if (
		( q_expected_prev[24] !== 1'bx ) && ( q_prev[24] !== q_expected_prev[24] )
		&& ((q_expected_prev[24] !== last_q_exp[24]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port q[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", q_expected_prev);
		$display ("     Real value = %b", q_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_q_exp[24] = q_expected_prev[24];
	end
	if (
		( q_expected_prev[25] !== 1'bx ) && ( q_prev[25] !== q_expected_prev[25] )
		&& ((q_expected_prev[25] !== last_q_exp[25]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port q[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", q_expected_prev);
		$display ("     Real value = %b", q_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_q_exp[25] = q_expected_prev[25];
	end
	if (
		( q_expected_prev[26] !== 1'bx ) && ( q_prev[26] !== q_expected_prev[26] )
		&& ((q_expected_prev[26] !== last_q_exp[26]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port q[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", q_expected_prev);
		$display ("     Real value = %b", q_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_q_exp[26] = q_expected_prev[26];
	end
	if (
		( q_expected_prev[27] !== 1'bx ) && ( q_prev[27] !== q_expected_prev[27] )
		&& ((q_expected_prev[27] !== last_q_exp[27]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port q[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", q_expected_prev);
		$display ("     Real value = %b", q_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_q_exp[27] = q_expected_prev[27];
	end
	if (
		( q_expected_prev[28] !== 1'bx ) && ( q_prev[28] !== q_expected_prev[28] )
		&& ((q_expected_prev[28] !== last_q_exp[28]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port q[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", q_expected_prev);
		$display ("     Real value = %b", q_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_q_exp[28] = q_expected_prev[28];
	end
	if (
		( q_expected_prev[29] !== 1'bx ) && ( q_prev[29] !== q_expected_prev[29] )
		&& ((q_expected_prev[29] !== last_q_exp[29]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port q[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", q_expected_prev);
		$display ("     Real value = %b", q_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_q_exp[29] = q_expected_prev[29];
	end
	if (
		( q_expected_prev[30] !== 1'bx ) && ( q_prev[30] !== q_expected_prev[30] )
		&& ((q_expected_prev[30] !== last_q_exp[30]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port q[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", q_expected_prev);
		$display ("     Real value = %b", q_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_q_exp[30] = q_expected_prev[30];
	end
	if (
		( q_expected_prev[31] !== 1'bx ) && ( q_prev[31] !== q_expected_prev[31] )
		&& ((q_expected_prev[31] !== last_q_exp[31]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port q[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", q_expected_prev);
		$display ("     Real value = %b", q_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_q_exp[31] = q_expected_prev[31];
	end
	if (
		( RAM_output_expected_prev[0] !== 1'bx ) && ( RAM_output_prev[0] !== RAM_output_expected_prev[0] )
		&& ((RAM_output_expected_prev[0] !== last_RAM_output_exp[0]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RAM_output[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RAM_output_expected_prev);
		$display ("     Real value = %b", RAM_output_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_RAM_output_exp[0] = RAM_output_expected_prev[0];
	end
	if (
		( RAM_output_expected_prev[1] !== 1'bx ) && ( RAM_output_prev[1] !== RAM_output_expected_prev[1] )
		&& ((RAM_output_expected_prev[1] !== last_RAM_output_exp[1]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RAM_output[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RAM_output_expected_prev);
		$display ("     Real value = %b", RAM_output_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_RAM_output_exp[1] = RAM_output_expected_prev[1];
	end
	if (
		( RAM_output_expected_prev[2] !== 1'bx ) && ( RAM_output_prev[2] !== RAM_output_expected_prev[2] )
		&& ((RAM_output_expected_prev[2] !== last_RAM_output_exp[2]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RAM_output[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RAM_output_expected_prev);
		$display ("     Real value = %b", RAM_output_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_RAM_output_exp[2] = RAM_output_expected_prev[2];
	end
	if (
		( RAM_output_expected_prev[3] !== 1'bx ) && ( RAM_output_prev[3] !== RAM_output_expected_prev[3] )
		&& ((RAM_output_expected_prev[3] !== last_RAM_output_exp[3]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RAM_output[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RAM_output_expected_prev);
		$display ("     Real value = %b", RAM_output_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_RAM_output_exp[3] = RAM_output_expected_prev[3];
	end
	if (
		( RAM_output_expected_prev[4] !== 1'bx ) && ( RAM_output_prev[4] !== RAM_output_expected_prev[4] )
		&& ((RAM_output_expected_prev[4] !== last_RAM_output_exp[4]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RAM_output[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RAM_output_expected_prev);
		$display ("     Real value = %b", RAM_output_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_RAM_output_exp[4] = RAM_output_expected_prev[4];
	end
	if (
		( RAM_output_expected_prev[5] !== 1'bx ) && ( RAM_output_prev[5] !== RAM_output_expected_prev[5] )
		&& ((RAM_output_expected_prev[5] !== last_RAM_output_exp[5]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RAM_output[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RAM_output_expected_prev);
		$display ("     Real value = %b", RAM_output_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_RAM_output_exp[5] = RAM_output_expected_prev[5];
	end
	if (
		( RAM_output_expected_prev[6] !== 1'bx ) && ( RAM_output_prev[6] !== RAM_output_expected_prev[6] )
		&& ((RAM_output_expected_prev[6] !== last_RAM_output_exp[6]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RAM_output[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RAM_output_expected_prev);
		$display ("     Real value = %b", RAM_output_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_RAM_output_exp[6] = RAM_output_expected_prev[6];
	end
	if (
		( RAM_output_expected_prev[7] !== 1'bx ) && ( RAM_output_prev[7] !== RAM_output_expected_prev[7] )
		&& ((RAM_output_expected_prev[7] !== last_RAM_output_exp[7]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RAM_output[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RAM_output_expected_prev);
		$display ("     Real value = %b", RAM_output_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_RAM_output_exp[7] = RAM_output_expected_prev[7];
	end
	if (
		( rd1_expected_prev[0] !== 1'bx ) && ( rd1_prev[0] !== rd1_expected_prev[0] )
		&& ((rd1_expected_prev[0] !== last_rd1_exp[0]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rd1[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rd1_expected_prev);
		$display ("     Real value = %b", rd1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_rd1_exp[0] = rd1_expected_prev[0];
	end
	if (
		( rd1_expected_prev[1] !== 1'bx ) && ( rd1_prev[1] !== rd1_expected_prev[1] )
		&& ((rd1_expected_prev[1] !== last_rd1_exp[1]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rd1[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rd1_expected_prev);
		$display ("     Real value = %b", rd1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_rd1_exp[1] = rd1_expected_prev[1];
	end
	if (
		( rd1_expected_prev[2] !== 1'bx ) && ( rd1_prev[2] !== rd1_expected_prev[2] )
		&& ((rd1_expected_prev[2] !== last_rd1_exp[2]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rd1[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rd1_expected_prev);
		$display ("     Real value = %b", rd1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_rd1_exp[2] = rd1_expected_prev[2];
	end
	if (
		( rd1_expected_prev[3] !== 1'bx ) && ( rd1_prev[3] !== rd1_expected_prev[3] )
		&& ((rd1_expected_prev[3] !== last_rd1_exp[3]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rd1[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rd1_expected_prev);
		$display ("     Real value = %b", rd1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_rd1_exp[3] = rd1_expected_prev[3];
	end
	if (
		( rd1_expected_prev[4] !== 1'bx ) && ( rd1_prev[4] !== rd1_expected_prev[4] )
		&& ((rd1_expected_prev[4] !== last_rd1_exp[4]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rd1[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rd1_expected_prev);
		$display ("     Real value = %b", rd1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_rd1_exp[4] = rd1_expected_prev[4];
	end
	if (
		( rd1_expected_prev[5] !== 1'bx ) && ( rd1_prev[5] !== rd1_expected_prev[5] )
		&& ((rd1_expected_prev[5] !== last_rd1_exp[5]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rd1[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rd1_expected_prev);
		$display ("     Real value = %b", rd1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_rd1_exp[5] = rd1_expected_prev[5];
	end
	if (
		( rd1_expected_prev[6] !== 1'bx ) && ( rd1_prev[6] !== rd1_expected_prev[6] )
		&& ((rd1_expected_prev[6] !== last_rd1_exp[6]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rd1[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rd1_expected_prev);
		$display ("     Real value = %b", rd1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_rd1_exp[6] = rd1_expected_prev[6];
	end
	if (
		( rd1_expected_prev[7] !== 1'bx ) && ( rd1_prev[7] !== rd1_expected_prev[7] )
		&& ((rd1_expected_prev[7] !== last_rd1_exp[7]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rd1[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rd1_expected_prev);
		$display ("     Real value = %b", rd1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_rd1_exp[7] = rd1_expected_prev[7];
	end
	if (
		( rd2_expected_prev[0] !== 1'bx ) && ( rd2_prev[0] !== rd2_expected_prev[0] )
		&& ((rd2_expected_prev[0] !== last_rd2_exp[0]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rd2[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rd2_expected_prev);
		$display ("     Real value = %b", rd2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_rd2_exp[0] = rd2_expected_prev[0];
	end
	if (
		( rd2_expected_prev[1] !== 1'bx ) && ( rd2_prev[1] !== rd2_expected_prev[1] )
		&& ((rd2_expected_prev[1] !== last_rd2_exp[1]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rd2[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rd2_expected_prev);
		$display ("     Real value = %b", rd2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_rd2_exp[1] = rd2_expected_prev[1];
	end
	if (
		( rd2_expected_prev[2] !== 1'bx ) && ( rd2_prev[2] !== rd2_expected_prev[2] )
		&& ((rd2_expected_prev[2] !== last_rd2_exp[2]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rd2[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rd2_expected_prev);
		$display ("     Real value = %b", rd2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_rd2_exp[2] = rd2_expected_prev[2];
	end
	if (
		( rd2_expected_prev[3] !== 1'bx ) && ( rd2_prev[3] !== rd2_expected_prev[3] )
		&& ((rd2_expected_prev[3] !== last_rd2_exp[3]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rd2[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rd2_expected_prev);
		$display ("     Real value = %b", rd2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_rd2_exp[3] = rd2_expected_prev[3];
	end
	if (
		( rd2_expected_prev[4] !== 1'bx ) && ( rd2_prev[4] !== rd2_expected_prev[4] )
		&& ((rd2_expected_prev[4] !== last_rd2_exp[4]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rd2[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rd2_expected_prev);
		$display ("     Real value = %b", rd2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_rd2_exp[4] = rd2_expected_prev[4];
	end
	if (
		( rd2_expected_prev[5] !== 1'bx ) && ( rd2_prev[5] !== rd2_expected_prev[5] )
		&& ((rd2_expected_prev[5] !== last_rd2_exp[5]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rd2[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rd2_expected_prev);
		$display ("     Real value = %b", rd2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_rd2_exp[5] = rd2_expected_prev[5];
	end
	if (
		( rd2_expected_prev[6] !== 1'bx ) && ( rd2_prev[6] !== rd2_expected_prev[6] )
		&& ((rd2_expected_prev[6] !== last_rd2_exp[6]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rd2[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rd2_expected_prev);
		$display ("     Real value = %b", rd2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_rd2_exp[6] = rd2_expected_prev[6];
	end
	if (
		( rd2_expected_prev[7] !== 1'bx ) && ( rd2_prev[7] !== rd2_expected_prev[7] )
		&& ((rd2_expected_prev[7] !== last_rd2_exp[7]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rd2[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rd2_expected_prev);
		$display ("     Real value = %b", rd2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_rd2_exp[7] = rd2_expected_prev[7];
	end
	if (
		( rr1_expected_prev[0] !== 1'bx ) && ( rr1_prev[0] !== rr1_expected_prev[0] )
		&& ((rr1_expected_prev[0] !== last_rr1_exp[0]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rr1[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rr1_expected_prev);
		$display ("     Real value = %b", rr1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_rr1_exp[0] = rr1_expected_prev[0];
	end
	if (
		( rr1_expected_prev[1] !== 1'bx ) && ( rr1_prev[1] !== rr1_expected_prev[1] )
		&& ((rr1_expected_prev[1] !== last_rr1_exp[1]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rr1[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rr1_expected_prev);
		$display ("     Real value = %b", rr1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_rr1_exp[1] = rr1_expected_prev[1];
	end
	if (
		( rr1_expected_prev[2] !== 1'bx ) && ( rr1_prev[2] !== rr1_expected_prev[2] )
		&& ((rr1_expected_prev[2] !== last_rr1_exp[2]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rr1[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rr1_expected_prev);
		$display ("     Real value = %b", rr1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_rr1_exp[2] = rr1_expected_prev[2];
	end
	if (
		( rr1_expected_prev[3] !== 1'bx ) && ( rr1_prev[3] !== rr1_expected_prev[3] )
		&& ((rr1_expected_prev[3] !== last_rr1_exp[3]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rr1[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rr1_expected_prev);
		$display ("     Real value = %b", rr1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_rr1_exp[3] = rr1_expected_prev[3];
	end
	if (
		( rr1_expected_prev[4] !== 1'bx ) && ( rr1_prev[4] !== rr1_expected_prev[4] )
		&& ((rr1_expected_prev[4] !== last_rr1_exp[4]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rr1[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rr1_expected_prev);
		$display ("     Real value = %b", rr1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_rr1_exp[4] = rr1_expected_prev[4];
	end
	if (
		( rr2_expected_prev[0] !== 1'bx ) && ( rr2_prev[0] !== rr2_expected_prev[0] )
		&& ((rr2_expected_prev[0] !== last_rr2_exp[0]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rr2[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rr2_expected_prev);
		$display ("     Real value = %b", rr2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_rr2_exp[0] = rr2_expected_prev[0];
	end
	if (
		( rr2_expected_prev[1] !== 1'bx ) && ( rr2_prev[1] !== rr2_expected_prev[1] )
		&& ((rr2_expected_prev[1] !== last_rr2_exp[1]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rr2[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rr2_expected_prev);
		$display ("     Real value = %b", rr2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_rr2_exp[1] = rr2_expected_prev[1];
	end
	if (
		( rr2_expected_prev[2] !== 1'bx ) && ( rr2_prev[2] !== rr2_expected_prev[2] )
		&& ((rr2_expected_prev[2] !== last_rr2_exp[2]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rr2[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rr2_expected_prev);
		$display ("     Real value = %b", rr2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_rr2_exp[2] = rr2_expected_prev[2];
	end
	if (
		( rr2_expected_prev[3] !== 1'bx ) && ( rr2_prev[3] !== rr2_expected_prev[3] )
		&& ((rr2_expected_prev[3] !== last_rr2_exp[3]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rr2[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rr2_expected_prev);
		$display ("     Real value = %b", rr2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_rr2_exp[3] = rr2_expected_prev[3];
	end
	if (
		( rr2_expected_prev[4] !== 1'bx ) && ( rr2_prev[4] !== rr2_expected_prev[4] )
		&& ((rr2_expected_prev[4] !== last_rr2_exp[4]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rr2[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rr2_expected_prev);
		$display ("     Real value = %b", rr2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_rr2_exp[4] = rr2_expected_prev[4];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module Lab2_vlg_vec_tst();
// constants                                           
// general purpose registers
reg GClock;
reg GReset;
reg RAM_Clock;
// wires                                               
wire [7:0] ALUresults;
wire [31:0] ALUsrcn2;
wire MemToR;
wire [7:0] next_pc;
wire [2:0] operation;
wire [7:0] PCValue;
wire [31:0] q;
wire [7:0] RAM_output;
wire [7:0] rd1;
wire [7:0] rd2;
wire [4:0] rr1;
wire [4:0] rr2;

wire sampler;                             

// assign statements (if any)                          
Lab2 i1 (
// port map - connection between master ports and signals/registers   
	.ALUresults(ALUresults),
	.ALUsrcn2(ALUsrcn2),
	.GClock(GClock),
	.GReset(GReset),
	.MemToR(MemToR),
	.next_pc(next_pc),
	.operation(operation),
	.PCValue(PCValue),
	.q(q),
	.RAM_Clock(RAM_Clock),
	.RAM_output(RAM_output),
	.rd1(rd1),
	.rd2(rd2),
	.rr1(rr1),
	.rr2(rr2)
);

// GClock
initial
begin
	GClock = 1'b0;
	GClock = #30000 1'b1;
	GClock = #60000 1'b0;
	GClock = #110000 1'b1;
	GClock = #70000 1'b0;
	GClock = #120000 1'b1;
	GClock = #110000 1'b0;
	GClock = #110000 1'b1;
	GClock = #70000 1'b0;
	GClock = #100000 1'b1;
	GClock = #50000 1'b0;
	GClock = #100000 1'b1;
end 

// GReset
initial
begin
	GReset = 1'b1;
	GReset = #80000 1'b0;
end 

// RAM_Clock
initial
begin
	RAM_Clock = 1'b0;
	RAM_Clock = #85000 1'b1;
	# 5000;
	repeat(91)
	begin
		RAM_Clock = 1'b0;
		RAM_Clock = #5000 1'b1;
		# 5000;
	end
end 

Lab2_vlg_sample_tst tb_sample (
	.GClock(GClock),
	.GReset(GReset),
	.RAM_Clock(RAM_Clock),
	.sampler_tx(sampler)
);

Lab2_vlg_check_tst tb_out(
	.ALUresults(ALUresults),
	.ALUsrcn2(ALUsrcn2),
	.MemToR(MemToR),
	.next_pc(next_pc),
	.operation(operation),
	.PCValue(PCValue),
	.q(q),
	.RAM_output(RAM_output),
	.rd1(rd1),
	.rd2(rd2),
	.rr1(rr1),
	.rr2(rr2),
	.sampler_rx(sampler)
);
endmodule

