// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "03/10/2025 14:15:26"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    test_edgedetector
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module test_edgedetector_vlg_sample_tst(
	inewd,
	sampler_tx
);
input [31:0] inewd;
output sampler_tx;

reg sample;
time current_time;
always @(inewd)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module test_edgedetector_vlg_check_tst (
	oedut,
	sampler_rx
);
input [31:0] oedut;
input sampler_rx;

reg [31:0] oedut_expected;

reg [31:0] oedut_prev;

reg [31:0] oedut_expected_prev;

reg [31:0] last_oedut_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:1] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 1'b1;
end

// update real /o prevs

always @(trigger)
begin
	oedut_prev = oedut;
end

// update expected /o prevs

always @(trigger)
begin
	oedut_expected_prev = oedut_expected;
end


// expected oedut[ 31 ]
initial
begin
	oedut_expected[31] = 1'bX;
end 
// expected oedut[ 30 ]
initial
begin
	oedut_expected[30] = 1'bX;
end 
// expected oedut[ 29 ]
initial
begin
	oedut_expected[29] = 1'bX;
end 
// expected oedut[ 28 ]
initial
begin
	oedut_expected[28] = 1'bX;
end 
// expected oedut[ 27 ]
initial
begin
	oedut_expected[27] = 1'bX;
end 
// expected oedut[ 26 ]
initial
begin
	oedut_expected[26] = 1'bX;
end 
// expected oedut[ 25 ]
initial
begin
	oedut_expected[25] = 1'bX;
end 
// expected oedut[ 24 ]
initial
begin
	oedut_expected[24] = 1'bX;
end 
// expected oedut[ 23 ]
initial
begin
	oedut_expected[23] = 1'bX;
end 
// expected oedut[ 22 ]
initial
begin
	oedut_expected[22] = 1'bX;
end 
// expected oedut[ 21 ]
initial
begin
	oedut_expected[21] = 1'bX;
end 
// expected oedut[ 20 ]
initial
begin
	oedut_expected[20] = 1'bX;
end 
// expected oedut[ 19 ]
initial
begin
	oedut_expected[19] = 1'bX;
end 
// expected oedut[ 18 ]
initial
begin
	oedut_expected[18] = 1'bX;
end 
// expected oedut[ 17 ]
initial
begin
	oedut_expected[17] = 1'bX;
end 
// expected oedut[ 16 ]
initial
begin
	oedut_expected[16] = 1'bX;
end 
// expected oedut[ 15 ]
initial
begin
	oedut_expected[15] = 1'bX;
end 
// expected oedut[ 14 ]
initial
begin
	oedut_expected[14] = 1'bX;
end 
// expected oedut[ 13 ]
initial
begin
	oedut_expected[13] = 1'bX;
end 
// expected oedut[ 12 ]
initial
begin
	oedut_expected[12] = 1'bX;
end 
// expected oedut[ 11 ]
initial
begin
	oedut_expected[11] = 1'bX;
end 
// expected oedut[ 10 ]
initial
begin
	oedut_expected[10] = 1'bX;
end 
// expected oedut[ 9 ]
initial
begin
	oedut_expected[9] = 1'bX;
end 
// expected oedut[ 8 ]
initial
begin
	oedut_expected[8] = 1'bX;
end 
// expected oedut[ 7 ]
initial
begin
	oedut_expected[7] = 1'bX;
end 
// expected oedut[ 6 ]
initial
begin
	oedut_expected[6] = 1'bX;
end 
// expected oedut[ 5 ]
initial
begin
	oedut_expected[5] = 1'bX;
end 
// expected oedut[ 4 ]
initial
begin
	oedut_expected[4] = 1'bX;
end 
// expected oedut[ 3 ]
initial
begin
	oedut_expected[3] = 1'bX;
end 
// expected oedut[ 2 ]
initial
begin
	oedut_expected[2] = 1'bX;
end 
// expected oedut[ 1 ]
initial
begin
	oedut_expected[1] = 1'bX;
end 
// expected oedut[ 0 ]
initial
begin
	oedut_expected[0] = 1'bX;
end 
// generate trigger
always @(oedut_expected or oedut)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected oedut = %b | ",oedut_expected_prev);
	$display("| real oedut = %b | ",oedut_prev);
`endif
	if (
		( oedut_expected_prev[0] !== 1'bx ) && ( oedut_prev[0] !== oedut_expected_prev[0] )
		&& ((oedut_expected_prev[0] !== last_oedut_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port oedut[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", oedut_expected_prev);
		$display ("     Real value = %b", oedut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_oedut_exp[0] = oedut_expected_prev[0];
	end
	if (
		( oedut_expected_prev[1] !== 1'bx ) && ( oedut_prev[1] !== oedut_expected_prev[1] )
		&& ((oedut_expected_prev[1] !== last_oedut_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port oedut[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", oedut_expected_prev);
		$display ("     Real value = %b", oedut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_oedut_exp[1] = oedut_expected_prev[1];
	end
	if (
		( oedut_expected_prev[2] !== 1'bx ) && ( oedut_prev[2] !== oedut_expected_prev[2] )
		&& ((oedut_expected_prev[2] !== last_oedut_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port oedut[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", oedut_expected_prev);
		$display ("     Real value = %b", oedut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_oedut_exp[2] = oedut_expected_prev[2];
	end
	if (
		( oedut_expected_prev[3] !== 1'bx ) && ( oedut_prev[3] !== oedut_expected_prev[3] )
		&& ((oedut_expected_prev[3] !== last_oedut_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port oedut[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", oedut_expected_prev);
		$display ("     Real value = %b", oedut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_oedut_exp[3] = oedut_expected_prev[3];
	end
	if (
		( oedut_expected_prev[4] !== 1'bx ) && ( oedut_prev[4] !== oedut_expected_prev[4] )
		&& ((oedut_expected_prev[4] !== last_oedut_exp[4]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port oedut[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", oedut_expected_prev);
		$display ("     Real value = %b", oedut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_oedut_exp[4] = oedut_expected_prev[4];
	end
	if (
		( oedut_expected_prev[5] !== 1'bx ) && ( oedut_prev[5] !== oedut_expected_prev[5] )
		&& ((oedut_expected_prev[5] !== last_oedut_exp[5]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port oedut[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", oedut_expected_prev);
		$display ("     Real value = %b", oedut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_oedut_exp[5] = oedut_expected_prev[5];
	end
	if (
		( oedut_expected_prev[6] !== 1'bx ) && ( oedut_prev[6] !== oedut_expected_prev[6] )
		&& ((oedut_expected_prev[6] !== last_oedut_exp[6]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port oedut[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", oedut_expected_prev);
		$display ("     Real value = %b", oedut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_oedut_exp[6] = oedut_expected_prev[6];
	end
	if (
		( oedut_expected_prev[7] !== 1'bx ) && ( oedut_prev[7] !== oedut_expected_prev[7] )
		&& ((oedut_expected_prev[7] !== last_oedut_exp[7]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port oedut[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", oedut_expected_prev);
		$display ("     Real value = %b", oedut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_oedut_exp[7] = oedut_expected_prev[7];
	end
	if (
		( oedut_expected_prev[8] !== 1'bx ) && ( oedut_prev[8] !== oedut_expected_prev[8] )
		&& ((oedut_expected_prev[8] !== last_oedut_exp[8]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port oedut[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", oedut_expected_prev);
		$display ("     Real value = %b", oedut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_oedut_exp[8] = oedut_expected_prev[8];
	end
	if (
		( oedut_expected_prev[9] !== 1'bx ) && ( oedut_prev[9] !== oedut_expected_prev[9] )
		&& ((oedut_expected_prev[9] !== last_oedut_exp[9]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port oedut[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", oedut_expected_prev);
		$display ("     Real value = %b", oedut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_oedut_exp[9] = oedut_expected_prev[9];
	end
	if (
		( oedut_expected_prev[10] !== 1'bx ) && ( oedut_prev[10] !== oedut_expected_prev[10] )
		&& ((oedut_expected_prev[10] !== last_oedut_exp[10]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port oedut[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", oedut_expected_prev);
		$display ("     Real value = %b", oedut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_oedut_exp[10] = oedut_expected_prev[10];
	end
	if (
		( oedut_expected_prev[11] !== 1'bx ) && ( oedut_prev[11] !== oedut_expected_prev[11] )
		&& ((oedut_expected_prev[11] !== last_oedut_exp[11]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port oedut[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", oedut_expected_prev);
		$display ("     Real value = %b", oedut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_oedut_exp[11] = oedut_expected_prev[11];
	end
	if (
		( oedut_expected_prev[12] !== 1'bx ) && ( oedut_prev[12] !== oedut_expected_prev[12] )
		&& ((oedut_expected_prev[12] !== last_oedut_exp[12]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port oedut[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", oedut_expected_prev);
		$display ("     Real value = %b", oedut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_oedut_exp[12] = oedut_expected_prev[12];
	end
	if (
		( oedut_expected_prev[13] !== 1'bx ) && ( oedut_prev[13] !== oedut_expected_prev[13] )
		&& ((oedut_expected_prev[13] !== last_oedut_exp[13]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port oedut[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", oedut_expected_prev);
		$display ("     Real value = %b", oedut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_oedut_exp[13] = oedut_expected_prev[13];
	end
	if (
		( oedut_expected_prev[14] !== 1'bx ) && ( oedut_prev[14] !== oedut_expected_prev[14] )
		&& ((oedut_expected_prev[14] !== last_oedut_exp[14]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port oedut[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", oedut_expected_prev);
		$display ("     Real value = %b", oedut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_oedut_exp[14] = oedut_expected_prev[14];
	end
	if (
		( oedut_expected_prev[15] !== 1'bx ) && ( oedut_prev[15] !== oedut_expected_prev[15] )
		&& ((oedut_expected_prev[15] !== last_oedut_exp[15]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port oedut[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", oedut_expected_prev);
		$display ("     Real value = %b", oedut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_oedut_exp[15] = oedut_expected_prev[15];
	end
	if (
		( oedut_expected_prev[16] !== 1'bx ) && ( oedut_prev[16] !== oedut_expected_prev[16] )
		&& ((oedut_expected_prev[16] !== last_oedut_exp[16]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port oedut[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", oedut_expected_prev);
		$display ("     Real value = %b", oedut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_oedut_exp[16] = oedut_expected_prev[16];
	end
	if (
		( oedut_expected_prev[17] !== 1'bx ) && ( oedut_prev[17] !== oedut_expected_prev[17] )
		&& ((oedut_expected_prev[17] !== last_oedut_exp[17]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port oedut[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", oedut_expected_prev);
		$display ("     Real value = %b", oedut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_oedut_exp[17] = oedut_expected_prev[17];
	end
	if (
		( oedut_expected_prev[18] !== 1'bx ) && ( oedut_prev[18] !== oedut_expected_prev[18] )
		&& ((oedut_expected_prev[18] !== last_oedut_exp[18]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port oedut[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", oedut_expected_prev);
		$display ("     Real value = %b", oedut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_oedut_exp[18] = oedut_expected_prev[18];
	end
	if (
		( oedut_expected_prev[19] !== 1'bx ) && ( oedut_prev[19] !== oedut_expected_prev[19] )
		&& ((oedut_expected_prev[19] !== last_oedut_exp[19]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port oedut[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", oedut_expected_prev);
		$display ("     Real value = %b", oedut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_oedut_exp[19] = oedut_expected_prev[19];
	end
	if (
		( oedut_expected_prev[20] !== 1'bx ) && ( oedut_prev[20] !== oedut_expected_prev[20] )
		&& ((oedut_expected_prev[20] !== last_oedut_exp[20]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port oedut[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", oedut_expected_prev);
		$display ("     Real value = %b", oedut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_oedut_exp[20] = oedut_expected_prev[20];
	end
	if (
		( oedut_expected_prev[21] !== 1'bx ) && ( oedut_prev[21] !== oedut_expected_prev[21] )
		&& ((oedut_expected_prev[21] !== last_oedut_exp[21]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port oedut[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", oedut_expected_prev);
		$display ("     Real value = %b", oedut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_oedut_exp[21] = oedut_expected_prev[21];
	end
	if (
		( oedut_expected_prev[22] !== 1'bx ) && ( oedut_prev[22] !== oedut_expected_prev[22] )
		&& ((oedut_expected_prev[22] !== last_oedut_exp[22]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port oedut[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", oedut_expected_prev);
		$display ("     Real value = %b", oedut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_oedut_exp[22] = oedut_expected_prev[22];
	end
	if (
		( oedut_expected_prev[23] !== 1'bx ) && ( oedut_prev[23] !== oedut_expected_prev[23] )
		&& ((oedut_expected_prev[23] !== last_oedut_exp[23]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port oedut[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", oedut_expected_prev);
		$display ("     Real value = %b", oedut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_oedut_exp[23] = oedut_expected_prev[23];
	end
	if (
		( oedut_expected_prev[24] !== 1'bx ) && ( oedut_prev[24] !== oedut_expected_prev[24] )
		&& ((oedut_expected_prev[24] !== last_oedut_exp[24]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port oedut[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", oedut_expected_prev);
		$display ("     Real value = %b", oedut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_oedut_exp[24] = oedut_expected_prev[24];
	end
	if (
		( oedut_expected_prev[25] !== 1'bx ) && ( oedut_prev[25] !== oedut_expected_prev[25] )
		&& ((oedut_expected_prev[25] !== last_oedut_exp[25]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port oedut[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", oedut_expected_prev);
		$display ("     Real value = %b", oedut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_oedut_exp[25] = oedut_expected_prev[25];
	end
	if (
		( oedut_expected_prev[26] !== 1'bx ) && ( oedut_prev[26] !== oedut_expected_prev[26] )
		&& ((oedut_expected_prev[26] !== last_oedut_exp[26]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port oedut[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", oedut_expected_prev);
		$display ("     Real value = %b", oedut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_oedut_exp[26] = oedut_expected_prev[26];
	end
	if (
		( oedut_expected_prev[27] !== 1'bx ) && ( oedut_prev[27] !== oedut_expected_prev[27] )
		&& ((oedut_expected_prev[27] !== last_oedut_exp[27]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port oedut[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", oedut_expected_prev);
		$display ("     Real value = %b", oedut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_oedut_exp[27] = oedut_expected_prev[27];
	end
	if (
		( oedut_expected_prev[28] !== 1'bx ) && ( oedut_prev[28] !== oedut_expected_prev[28] )
		&& ((oedut_expected_prev[28] !== last_oedut_exp[28]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port oedut[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", oedut_expected_prev);
		$display ("     Real value = %b", oedut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_oedut_exp[28] = oedut_expected_prev[28];
	end
	if (
		( oedut_expected_prev[29] !== 1'bx ) && ( oedut_prev[29] !== oedut_expected_prev[29] )
		&& ((oedut_expected_prev[29] !== last_oedut_exp[29]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port oedut[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", oedut_expected_prev);
		$display ("     Real value = %b", oedut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_oedut_exp[29] = oedut_expected_prev[29];
	end
	if (
		( oedut_expected_prev[30] !== 1'bx ) && ( oedut_prev[30] !== oedut_expected_prev[30] )
		&& ((oedut_expected_prev[30] !== last_oedut_exp[30]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port oedut[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", oedut_expected_prev);
		$display ("     Real value = %b", oedut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_oedut_exp[30] = oedut_expected_prev[30];
	end
	if (
		( oedut_expected_prev[31] !== 1'bx ) && ( oedut_prev[31] !== oedut_expected_prev[31] )
		&& ((oedut_expected_prev[31] !== last_oedut_exp[31]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port oedut[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", oedut_expected_prev);
		$display ("     Real value = %b", oedut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_oedut_exp[31] = oedut_expected_prev[31];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module test_edgedetector_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [31:0] inewd;
// wires                                               
wire [31:0] oedut;

wire sampler;                             

// assign statements (if any)                          
test_edgedetector i1 (
// port map - connection between master ports and signals/registers   
	.inewd(inewd),
	.oedut(oedut)
);
// inewd[ 31 ]
initial
begin
	inewd[31] = 1'b0;
end 
// inewd[ 30 ]
initial
begin
	inewd[30] = 1'b0;
end 
// inewd[ 29 ]
initial
begin
	inewd[29] = 1'b0;
end 
// inewd[ 28 ]
initial
begin
	inewd[28] = 1'b0;
end 
// inewd[ 27 ]
initial
begin
	inewd[27] = 1'b0;
end 
// inewd[ 26 ]
initial
begin
	inewd[26] = 1'b0;
end 
// inewd[ 25 ]
initial
begin
	inewd[25] = 1'b0;
end 
// inewd[ 24 ]
initial
begin
	inewd[24] = 1'b0;
end 
// inewd[ 23 ]
initial
begin
	inewd[23] = 1'b0;
end 
// inewd[ 22 ]
initial
begin
	inewd[22] = 1'b0;
end 
// inewd[ 21 ]
initial
begin
	inewd[21] = 1'b0;
end 
// inewd[ 20 ]
initial
begin
	inewd[20] = 1'b0;
end 
// inewd[ 19 ]
initial
begin
	inewd[19] = 1'b0;
end 
// inewd[ 18 ]
initial
begin
	inewd[18] = 1'b0;
end 
// inewd[ 17 ]
initial
begin
	inewd[17] = 1'b0;
end 
// inewd[ 16 ]
initial
begin
	inewd[16] = 1'b0;
end 
// inewd[ 15 ]
initial
begin
	inewd[15] = 1'b0;
end 
// inewd[ 14 ]
initial
begin
	inewd[14] = 1'b0;
end 
// inewd[ 13 ]
initial
begin
	inewd[13] = 1'b0;
end 
// inewd[ 12 ]
initial
begin
	inewd[12] = 1'b0;
end 
// inewd[ 11 ]
initial
begin
	inewd[11] = 1'b0;
end 
// inewd[ 10 ]
initial
begin
	inewd[10] = 1'b0;
end 
// inewd[ 9 ]
initial
begin
	inewd[9] = 1'b0;
end 
// inewd[ 8 ]
initial
begin
	inewd[8] = 1'b0;
end 
// inewd[ 7 ]
initial
begin
	inewd[7] = 1'b0;
end 
// inewd[ 6 ]
initial
begin
	inewd[6] = 1'b0;
end 
// inewd[ 5 ]
initial
begin
	inewd[5] = 1'b0;
end 
// inewd[ 4 ]
initial
begin
	inewd[4] = 1'b0;
end 
// inewd[ 3 ]
initial
begin
	inewd[3] = 1'b0;
end 
// inewd[ 2 ]
initial
begin
	inewd[2] = 1'b1;
end 
// inewd[ 1 ]
initial
begin
	inewd[1] = 1'b0;
end 
// inewd[ 0 ]
initial
begin
	inewd[0] = 1'b0;
end 

test_edgedetector_vlg_sample_tst tb_sample (
	.inewd(inewd),
	.sampler_tx(sampler)
);

test_edgedetector_vlg_check_tst tb_out(
	.oedut(oedut),
	.sampler_rx(sampler)
);
endmodule

