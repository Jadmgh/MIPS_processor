// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "02/26/2025 20:33:48"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    testing_reg_file
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module testing_reg_file_vlg_sample_tst(
	Read_reg_1,
	Read_reg_2,
	write_data,
	Write_reg,
	sampler_tx
);
input [2:0] Read_reg_1;
input [2:0] Read_reg_2;
input [7:0] write_data;
input [2:0] Write_reg;
output sampler_tx;

reg sample;
time current_time;
always @(Read_reg_1 or Read_reg_2 or write_data or Write_reg)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module testing_reg_file_vlg_check_tst (
	read_o_1,
	read_o_2,
	sampler_rx
);
input [7:0] read_o_1;
input [7:0] read_o_2;
input sampler_rx;

reg [7:0] read_o_1_expected;
reg [7:0] read_o_2_expected;

reg [7:0] read_o_1_prev;
reg [7:0] read_o_2_prev;

reg [7:0] read_o_1_expected_prev;
reg [7:0] read_o_2_expected_prev;

reg [7:0] last_read_o_1_exp;
reg [7:0] last_read_o_2_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:2] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 2'b1;
end

// update real /o prevs

always @(trigger)
begin
	read_o_1_prev = read_o_1;
	read_o_2_prev = read_o_2;
end

// update expected /o prevs

always @(trigger)
begin
	read_o_1_expected_prev = read_o_1_expected;
	read_o_2_expected_prev = read_o_2_expected;
end


// expected read_o_1[ 7 ]
initial
begin
	read_o_1_expected[7] = 1'bX;
end 
// expected read_o_1[ 6 ]
initial
begin
	read_o_1_expected[6] = 1'bX;
end 
// expected read_o_1[ 5 ]
initial
begin
	read_o_1_expected[5] = 1'bX;
end 
// expected read_o_1[ 4 ]
initial
begin
	read_o_1_expected[4] = 1'bX;
end 
// expected read_o_1[ 3 ]
initial
begin
	read_o_1_expected[3] = 1'bX;
end 
// expected read_o_1[ 2 ]
initial
begin
	read_o_1_expected[2] = 1'bX;
end 
// expected read_o_1[ 1 ]
initial
begin
	read_o_1_expected[1] = 1'bX;
end 
// expected read_o_1[ 0 ]
initial
begin
	read_o_1_expected[0] = 1'bX;
end 
// expected read_o_2[ 7 ]
initial
begin
	read_o_2_expected[7] = 1'bX;
end 
// expected read_o_2[ 6 ]
initial
begin
	read_o_2_expected[6] = 1'bX;
end 
// expected read_o_2[ 5 ]
initial
begin
	read_o_2_expected[5] = 1'bX;
end 
// expected read_o_2[ 4 ]
initial
begin
	read_o_2_expected[4] = 1'bX;
end 
// expected read_o_2[ 3 ]
initial
begin
	read_o_2_expected[3] = 1'bX;
end 
// expected read_o_2[ 2 ]
initial
begin
	read_o_2_expected[2] = 1'bX;
end 
// expected read_o_2[ 1 ]
initial
begin
	read_o_2_expected[1] = 1'bX;
end 
// expected read_o_2[ 0 ]
initial
begin
	read_o_2_expected[0] = 1'bX;
end 
// generate trigger
always @(read_o_1_expected or read_o_1 or read_o_2_expected or read_o_2)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected read_o_1 = %b | expected read_o_2 = %b | ",read_o_1_expected_prev,read_o_2_expected_prev);
	$display("| real read_o_1 = %b | real read_o_2 = %b | ",read_o_1_prev,read_o_2_prev);
`endif
	if (
		( read_o_1_expected_prev[0] !== 1'bx ) && ( read_o_1_prev[0] !== read_o_1_expected_prev[0] )
		&& ((read_o_1_expected_prev[0] !== last_read_o_1_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port read_o_1[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", read_o_1_expected_prev);
		$display ("     Real value = %b", read_o_1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_read_o_1_exp[0] = read_o_1_expected_prev[0];
	end
	if (
		( read_o_1_expected_prev[1] !== 1'bx ) && ( read_o_1_prev[1] !== read_o_1_expected_prev[1] )
		&& ((read_o_1_expected_prev[1] !== last_read_o_1_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port read_o_1[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", read_o_1_expected_prev);
		$display ("     Real value = %b", read_o_1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_read_o_1_exp[1] = read_o_1_expected_prev[1];
	end
	if (
		( read_o_1_expected_prev[2] !== 1'bx ) && ( read_o_1_prev[2] !== read_o_1_expected_prev[2] )
		&& ((read_o_1_expected_prev[2] !== last_read_o_1_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port read_o_1[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", read_o_1_expected_prev);
		$display ("     Real value = %b", read_o_1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_read_o_1_exp[2] = read_o_1_expected_prev[2];
	end
	if (
		( read_o_1_expected_prev[3] !== 1'bx ) && ( read_o_1_prev[3] !== read_o_1_expected_prev[3] )
		&& ((read_o_1_expected_prev[3] !== last_read_o_1_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port read_o_1[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", read_o_1_expected_prev);
		$display ("     Real value = %b", read_o_1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_read_o_1_exp[3] = read_o_1_expected_prev[3];
	end
	if (
		( read_o_1_expected_prev[4] !== 1'bx ) && ( read_o_1_prev[4] !== read_o_1_expected_prev[4] )
		&& ((read_o_1_expected_prev[4] !== last_read_o_1_exp[4]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port read_o_1[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", read_o_1_expected_prev);
		$display ("     Real value = %b", read_o_1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_read_o_1_exp[4] = read_o_1_expected_prev[4];
	end
	if (
		( read_o_1_expected_prev[5] !== 1'bx ) && ( read_o_1_prev[5] !== read_o_1_expected_prev[5] )
		&& ((read_o_1_expected_prev[5] !== last_read_o_1_exp[5]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port read_o_1[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", read_o_1_expected_prev);
		$display ("     Real value = %b", read_o_1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_read_o_1_exp[5] = read_o_1_expected_prev[5];
	end
	if (
		( read_o_1_expected_prev[6] !== 1'bx ) && ( read_o_1_prev[6] !== read_o_1_expected_prev[6] )
		&& ((read_o_1_expected_prev[6] !== last_read_o_1_exp[6]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port read_o_1[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", read_o_1_expected_prev);
		$display ("     Real value = %b", read_o_1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_read_o_1_exp[6] = read_o_1_expected_prev[6];
	end
	if (
		( read_o_1_expected_prev[7] !== 1'bx ) && ( read_o_1_prev[7] !== read_o_1_expected_prev[7] )
		&& ((read_o_1_expected_prev[7] !== last_read_o_1_exp[7]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port read_o_1[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", read_o_1_expected_prev);
		$display ("     Real value = %b", read_o_1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_read_o_1_exp[7] = read_o_1_expected_prev[7];
	end
	if (
		( read_o_2_expected_prev[0] !== 1'bx ) && ( read_o_2_prev[0] !== read_o_2_expected_prev[0] )
		&& ((read_o_2_expected_prev[0] !== last_read_o_2_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port read_o_2[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", read_o_2_expected_prev);
		$display ("     Real value = %b", read_o_2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_read_o_2_exp[0] = read_o_2_expected_prev[0];
	end
	if (
		( read_o_2_expected_prev[1] !== 1'bx ) && ( read_o_2_prev[1] !== read_o_2_expected_prev[1] )
		&& ((read_o_2_expected_prev[1] !== last_read_o_2_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port read_o_2[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", read_o_2_expected_prev);
		$display ("     Real value = %b", read_o_2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_read_o_2_exp[1] = read_o_2_expected_prev[1];
	end
	if (
		( read_o_2_expected_prev[2] !== 1'bx ) && ( read_o_2_prev[2] !== read_o_2_expected_prev[2] )
		&& ((read_o_2_expected_prev[2] !== last_read_o_2_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port read_o_2[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", read_o_2_expected_prev);
		$display ("     Real value = %b", read_o_2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_read_o_2_exp[2] = read_o_2_expected_prev[2];
	end
	if (
		( read_o_2_expected_prev[3] !== 1'bx ) && ( read_o_2_prev[3] !== read_o_2_expected_prev[3] )
		&& ((read_o_2_expected_prev[3] !== last_read_o_2_exp[3]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port read_o_2[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", read_o_2_expected_prev);
		$display ("     Real value = %b", read_o_2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_read_o_2_exp[3] = read_o_2_expected_prev[3];
	end
	if (
		( read_o_2_expected_prev[4] !== 1'bx ) && ( read_o_2_prev[4] !== read_o_2_expected_prev[4] )
		&& ((read_o_2_expected_prev[4] !== last_read_o_2_exp[4]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port read_o_2[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", read_o_2_expected_prev);
		$display ("     Real value = %b", read_o_2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_read_o_2_exp[4] = read_o_2_expected_prev[4];
	end
	if (
		( read_o_2_expected_prev[5] !== 1'bx ) && ( read_o_2_prev[5] !== read_o_2_expected_prev[5] )
		&& ((read_o_2_expected_prev[5] !== last_read_o_2_exp[5]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port read_o_2[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", read_o_2_expected_prev);
		$display ("     Real value = %b", read_o_2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_read_o_2_exp[5] = read_o_2_expected_prev[5];
	end
	if (
		( read_o_2_expected_prev[6] !== 1'bx ) && ( read_o_2_prev[6] !== read_o_2_expected_prev[6] )
		&& ((read_o_2_expected_prev[6] !== last_read_o_2_exp[6]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port read_o_2[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", read_o_2_expected_prev);
		$display ("     Real value = %b", read_o_2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_read_o_2_exp[6] = read_o_2_expected_prev[6];
	end
	if (
		( read_o_2_expected_prev[7] !== 1'bx ) && ( read_o_2_prev[7] !== read_o_2_expected_prev[7] )
		&& ((read_o_2_expected_prev[7] !== last_read_o_2_exp[7]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port read_o_2[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", read_o_2_expected_prev);
		$display ("     Real value = %b", read_o_2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_read_o_2_exp[7] = read_o_2_expected_prev[7];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module testing_reg_file_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [2:0] Read_reg_1;
reg [2:0] Read_reg_2;
reg [7:0] write_data;
reg [2:0] Write_reg;
// wires                                               
wire [7:0] read_o_1;
wire [7:0] read_o_2;

wire sampler;                             

// assign statements (if any)                          
testing_reg_file i1 (
// port map - connection between master ports and signals/registers   
	.read_o_1(read_o_1),
	.read_o_2(read_o_2),
	.Read_reg_1(Read_reg_1),
	.Read_reg_2(Read_reg_2),
	.write_data(write_data),
	.Write_reg(Write_reg)
);
// Read_reg_1[ 2 ]
initial
begin
	Read_reg_1[2] = 1'b0;
end 
// Read_reg_1[ 1 ]
initial
begin
	Read_reg_1[1] = 1'b0;
end 
// Read_reg_1[ 0 ]
initial
begin
	Read_reg_1[0] = 1'b0;
end 
// Read_reg_2[ 2 ]
initial
begin
	Read_reg_2[2] = 1'b0;
	Read_reg_2[2] = #80000 1'b1;
	Read_reg_2[2] = #130000 1'b0;
end 
// Read_reg_2[ 1 ]
initial
begin
	Read_reg_2[1] = 1'b0;
end 
// Read_reg_2[ 0 ]
initial
begin
	Read_reg_2[0] = 1'b0;
end 
// Write_reg[ 2 ]
initial
begin
	Write_reg[2] = 1'b1;
	Write_reg[2] = #30000 1'b0;
end 
// Write_reg[ 1 ]
initial
begin
	Write_reg[1] = 1'b0;
end 
// Write_reg[ 0 ]
initial
begin
	Write_reg[0] = 1'b0;
end 
// write_data[ 7 ]
initial
begin
	write_data[7] = 1'b0;
end 
// write_data[ 6 ]
initial
begin
	write_data[6] = 1'b0;
end 
// write_data[ 5 ]
initial
begin
	write_data[5] = 1'b1;
end 
// write_data[ 4 ]
initial
begin
	write_data[4] = 1'b1;
end 
// write_data[ 3 ]
initial
begin
	write_data[3] = 1'b1;
end 
// write_data[ 2 ]
initial
begin
	write_data[2] = 1'b0;
end 
// write_data[ 1 ]
initial
begin
	write_data[1] = 1'b0;
end 
// write_data[ 0 ]
initial
begin
	write_data[0] = 1'b0;
end 

testing_reg_file_vlg_sample_tst tb_sample (
	.Read_reg_1(Read_reg_1),
	.Read_reg_2(Read_reg_2),
	.write_data(write_data),
	.Write_reg(Write_reg),
	.sampler_tx(sampler)
);

testing_reg_file_vlg_check_tst tb_out(
	.read_o_1(read_o_1),
	.read_o_2(read_o_2),
	.sampler_rx(sampler)
);
endmodule

